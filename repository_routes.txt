Repository Routes (created at 2025-03-03 09:23:35)
================================================================================

/api/{application}/company/{company} [POST] => companyRepository.setCluster()
/application/whitelabel/config/cname/{cName} [GET] => applicationRepository.getConfigByCName()
/{application}/auth/login [POST] => auth2Repository.loginWithCredentials()
/{application}/auth/read-only-token/{user} [POST] => auth2Repository.createReadOnlyRefreshToken()
/{application}/auth/refresh/{user} [POST] => auth2Repository.createTokenByRefreshToken()
/{application}/auth/session [POST] => auth2Repository.createTokenBySession()
/{application}/auth/session-deprecated/confirm [POST] => auth2Repository.createTokenByConfirmCodeAndDeprecatedJwt()
/{application}/auth/token/{user} [POST] => auth2Repository.createToken()
/{application}/cluster [GET] => clusterRepository.getCluster()
/{application}/cluster/primary [POST] => applicationRepository.getPrimaryCluster()
/{application}/company/{company}/disconnect/{user} [PUT] => companyRepository.disconnectUser()
/{application}/memory/{objectType}/{objectId} [PUT] => memoryRepository.set()
/{application}/user [POST] => userRepository.createUser()
/{application}/user/activate [POST] => userRepository.activate()
/{application}/user/find [POST] => userRepository.find()
/{application}/user/password/request [POST] => userRepository.requestPasswordReset()
/{application}/user/{user} [DELETE] => userRepository.deleteUser()
/{application}/user/{user} [PUT] => userRepository.updateUser()
/{application}/user/{user}/connect [POST] => userRepository.connectAuthAccount()
/{application}/user/{user}/deletable/{company} [POST] => userRepository.isDeletable()
/{application}/user/{user}/language [PUT] => userRepository.setPreferredLanguage()
/{application}/user/{user}/password [PUT] => userRepository.changePassword()
/{application}/user/{user}/password/reset [PUT] => userRepository.resetPassword()
alerting/channels/{project} [GET] => alertingchannelRepository.list()
alerting/channels/{project} [POST] => alertingchannelRepository.create()
alerting/channels/{project}/{channel} [DELETE] => alertingchannelRepository.delete()
alerting/channels/{project}/{channel} [PUT] => alertingchannelRepository.update()
alerting/policies/{project} [GET] => alertingpolicyRepository.list()
alerting/policies/{project} [POST] => alertingpolicyRepository.create()
alerting/policies/{project}/{policy} [DELETE] => alertingpolicyRepository.delete()
alerting/policies/{project}/{policy} [PUT] => alertingpolicyRepository.update()
auth/2fa/is-required [POST] => twofactorRepository.isTwoFactorRequired()
auth/2fa/trigger [POST] => twofactorRepository.triggerTwoFactorForAction()
auth/tokens/access [POST] => authRepository.createTokenByCredentials()
auth/tokens/refresh/{user} [POST] => authRepository.createTokenByRefreshToken()
check/checks/company/{company}/deadlinks [GET] => checkdeadlinksRepository.getResultsByCompany()
check/checks/cookbook [POST] => checkRepository.addByRecipe()
check/checks/deadlinks/blocked [GET] => checkdeadlinksRepository.getBlockedPatterns()
check/checks/run/{system}/{toolIdentifier} [POST] => checkRepository.runChecksForSystem()
check/checks/{system}/a11y/results [GET] => checka11yRepository.getResults()
check/checks/{system}/brokenresources [GET] => checkbrokenresourceRepository.getBrokenResources()
check/checks/{system}/certificate [GET] => checkcertificateRepository.getExpirationResults()
check/checks/{system}/checklist [POST] => checkRepository.addByChecklist()
check/checks/{system}/cookies/domains [GET] => checkcookieRepository.getDomains()
check/checks/{system}/deadlinks [GET] => checkdeadlinksRepository.getResults()
check/checks/{system}/deadlinks/config [GET] => checkdeadlinksRepository.getConfiguration()
check/checks/{system}/deadlinks/ignore [POST] => checkdeadlinksRepository.ignorePattern()
check/checks/{system}/deadlinks/unignore [POST] => checkdeadlinksRepository.unignorePattern()
check/checks/{system}/healthchecks [GET] => checkhealthcheckRepository.getResults()
check/checks/{system}/insecure [GET] => checkinsecurecontentRepository.getInsecureElements()
check/checks/{system}/jserrors [GET] => checkjavascripterrorsRepository.getResults()
check/checks/{system}/lighthouse/results/{category} [GET] => checklighthouseRepository.getResults()
check/checks/{system}/mobilefriendly [GET] => checkmobilefriendlyRepository.getResults()
check/checks/{system}/performance/big [GET] => checkfilesizeRepository.getResults()
check/checks/{system}/siteinfo/ignore [POST] => checkfilesizeRepository.ignorePattern()
check/checks/{system}/sitemap [GET] => checksitemapRepository.getResults()
check/collections/system/active/{system}/{toolIdentifier} [POST] => checkRepository.showActiveCollections()
check/collections/system/{system} [PUT] => checkRepository.updateCollections()
check/collections/{project}/{toolIdentifier} [POST] => checkRepository.showCollections()
check/nixtstats/{company}/monitor/website [POST] => nixstatsRepository.createWebsiteMonitor()
check/tools/changed [POST] => toolRepository.getChangedConfiguration()
check/tools/{project} [POST] => toolRepository.findByProject()
check/tools/{project}/{toolIdentifier} [GET] => toolRepository.getConfiguration()
check/tools/{project}/{toolIdentifier} [PUT] => toolRepository.overwrite()
crawler/collections [POST] => crawlerRepository.getCrawlableCollections()
crawler/company/{company}/check/status [GET] => crawlerRepository.listCheckStatus()
crawler/company/{company}/check/status [POST] => crawlerRepository.setCheckStatus()
crawler/company/{company}/check/status/{crawlUrlStatus} [DELETE] => crawlerRepository.deleteCheckStatus()
crawler/company/{company}/schedules [GET] => crawlerRepository.listCrawlSchedules()
crawler/company/{company}/schedules [POST] => crawlerRepository.createCrawlSchedule()
crawler/company/{company}/schedules/{crawlSchedule} [DELETE] => crawlerRepository.deleteCrawlSchedule()
crawler/company/{company}/schedules/{crawlSchedule} [GET] => crawlerRepository.showCrawlSchedule()
crawler/company/{company}/schedules/{crawlSchedule} [PATCH] => crawlerRepository.updateCrawlSchedule()
crawler/company/{company}/schedules/{crawlSchedule}/crawl [POST] => crawlerRepository.runScheduledCrawl()
crawler/crawl/company/{company} [POST] => crawlerRepository.runCompanyCrawl()
crawler/crawl/company/{company}/crawls [POST] => crawlerRepository.listCompanyCrawls()
crawler/crawl/company/{company}/settings [POST] => crawlerRepository.getCrawlerSettings()
crawler/crawl/detail/csv/{crawl}/{downloadSecret} [GET] => crawlerRepository.getCrawlCsv()
crawler/crawl/detail/{crawl} [POST] => crawlerRepository.getCrawl()
crawler/crawl/{project} [POST] => crawlerRepository.runCrawl()
crawler/crawl/{project}/crawls [POST] => crawlerRepository.listCrawls()
crawler/crawl/{project}/{crawl} [PUT] => crawlerRepository.abortCrawl()
crawler/status/company/{company} [POST] => crawlerRepository.getCompanyCrawlerStatus()
crawler/status/{project} [GET] => crawlerRepository.getCrawlerStatus()
customers/haendlerbund/metrics/{system} [POST] => customerhaendlerbundmetricRepository.findBySystem()
customers/haendlerbund/shops [POST] => customerhaendlerbundRepository.createShop()
customers/haendlerbund/shops/{system} [PUT] => customerhaendlerbundRepository.updateShop()
customers/mehrwertsteuer/crawl [POST] => customermehrwertsteuercheckRepository.runMwstCrawl()
customers/mehrwertsteuer/crawl/{crawlIdentifier} [GET] => customermehrwertsteuercheckRepository.showCrawlResult()
incident/incidents/company/{company}/search [POST] => incidentRepository.findByCompany()
incident/incidents/{project}/search [POST] => incidentRepository.search()
incident/incidents/{project}/since [POST] => incidentRepository.since()
incident/incidents/{project}/{incident} [GET] => incidentRepository.find()
incident/tools/{project} [GET] => incidentRepository.getConfig()
marketplace/features/components/{system}/{featureIdentifier} [GET] => marketplaceRepository.getComponents()
marketplace/features/components/{system}/{suggestionIdentifier} [POST] => marketplaceRepository.setComponent()
marketplace/features/project/{project} [GET] => marketplaceRepository.getActiveProjectFeatures()
marketplace/features/provider/{providerIdentifier} [GET] => marketplaceRepository.getActiveProviderFeatures()
marketplace/features/status/{system}/{featureIdentifier} [GET] => marketplaceRepository.getHealthStatus()
marketplace/log/company/{company} [GET] => marketplaceRepository.getBookingLog()
marketplace/marketplace/favourites [GET] => marketplaceRepository.getFavourites()
marketplace/marketplace/feature/activate/{company}/{featureIdentifier} [POST] => marketplaceRepository.activateFeature()
marketplace/marketplace/feature/active/{project} [GET] => marketplaceRepository.getActiveFeatures()
marketplace/marketplace/feature/all [POST] => marketplaceRepository.getAllFeatures()
marketplace/marketplace/feature/available/{project} [POST] => marketplaceRepository.getAvailableFeatures()
marketplace/marketplace/feature/deactivate/{company}/{featureIdentifier} [POST] => marketplaceRepository.deactivateFeature()
marketplace/marketplace/features/{providerIdentifier}/{company} [GET] => marketplaceRepository.getFeatures()
marketplace/plugins/incidents/system/{system} [GET] => marketplaceRepository.getSystemPluginStatus()
marketplace/plugins/incidents/user/{user} [GET] => marketplaceRepository.getUserPluginStatus()
marketplace/proxy/{secret}/{url} [GET] => marketplaceRepository.restProxy()
metric/eventidentifier/{system}/search [POST] => metricRepository.findBySystem()
project/components [POST] => componentRepository.createComponent()
project/components/componenttypes/{project} [GET] => componentRepository.showComponentTypes()
project/components/many [POST] => componentRepository.createComponents()
project/components/{component} [DELETE] => componentRepository.deleteComponent()
project/components/{component} [GET] => componentRepository.showComponents()
project/components/{component} [PUT] => componentRepository.updateComponent()
project/location/list [GET] => locationRepository.list()
project/projects/search [POST] => projectRepository.search()
project/projects/{project} [DELETE] => projectRepository.delete()
project/projects/{project} [PUT] => projectRepository.update()
project/screenshot/{system} [POST] => screenshotRepository.getScreenshot()
project/screenshots/{system} [POST] => screenshotRepository.getSystemScreenshots()
project/systems/system [POST] => systemRepository.createSystem()
project/systems/system/{system} [PUT] => systemRepository.updateSystem()
project/systems/{providerIdentifier}/systemType [POST] => systemRepository.getSystemTypes()
project/systems/{system}/component/limit [GET] => systemRepository.getComponentLimit()
project/systems/{system}/components [GET] => systemRepository.getComponents()
project/systems/{system}/lastFullRun/{status} [POST] => systemRepository.changeLastFullRun()
project/systems/{system}/nextFullRun [GET] => systemRepository.getNextLastFullRun()
project/systems/{system}/suggestions [POST] => systemRepository.getComponentSuggestions()
project/users/{project} [GET] => projectRepository.getUsers()
project/users/{project}/{user} [DELETE] => projectRepository.removeUser()
project/{project}/componentfinder/{system}/{user}/trigger [POST] => systemRepository.triggerComponentFinder()
project/{project}/onboarding/status [POST] => projectRepository.getStatus()
project/{providerIdentifier}/all [GET] => projectRepository.searchAll()
score/scores/user/{user} [POST] => scoreRepository.getScoresByUser()
score/scores/{system} [POST] => scoreRepository.getScores()
score/scores/{system}/{scoreName} [POST] => scoreRepository.getScore()
sequences/{project}/commands [GET] => sequenceRepository.getCommands()
sequences/{project}/sequence [POST] => sequenceRepository.createSequence()
sequences/{project}/sequence [PUT] => sequenceRepository.updateSequence()
sequences/{project}/sequences [GET] => sequenceRepository.getSequences()
sequences/{sequence}/activate [PUT] => sequenceRepository.activateSequence()
sequences/{sequence}/deactivate [PUT] => sequenceRepository.deactivateSequence()
sequences/{sequence}/recent [GET] => sequenceRepository.getRecentRuns()
subscription [GET] => subscriptionRepository.getUserSubscriptions()
subscription/checkout/session [POST] => subscriptionRepository.createCheckoutSession()
subscription/company/{company}/ [GET] => subscriptionRepository.getCompanySubscription()
subscription/company/{company}/billingaddress [GET] => subscriptionRepository.getBillingAddress()
subscription/company/{company}/billingaddress [POST] => subscriptionRepository.setBillingAddress()
subscription/company/{company}/creditcard [POST] => subscriptionRepository.setCreditCard()
subscription/company/{company}/features [GET] => subscriptionRepository.getSubscribedFeatures()
subscription/company/{company}/invoices [GET] => subscriptionRepository.getCompanyInvoices()
subscription/company/{company}/plans/creditcard [POST] => subscriptionRepository.setCompanyCreditCardPlans()
subscription/company/{company}/plans/free [POST] => subscriptionRepository.setCompanyFreePlans()
subscription/company/{company}/quota [GET] => subscriptionRepository.getQuota()
subscription/external/{subscriptionId} [DELETE] => subscriptionRepository.cancelSubscription()
subscription/portal/session [POST] => subscriptionRepository.createCustomerPortalSession()
subscription/products [GET] => subscriptionRepository.getSubscriptionProducts()
subscription/project/{project} [POST] => subscriptionRepository.updateSubscriptionByProject()
subscription/trial/{providerIdentifier}/end [POST] => subscriptionRepository.endTrials()
subscription/user/{user}/plan [POST] => subscriptionRepository.setSubscriptionPlan()
subscription/user/{user}/plans/free [POST] => subscriptionRepository.setCompanyFreePlansByUser()
user/companies/connect/{company}/{user} [POST] => clustercompanyRepository.connectUser()
user/companies/exists [GET] => clustercompanyRepository.exists()
user/companies/findall/{providerIdentifier} [POST] => clustercompanyRepository.findAll()
user/companies/search/{providerIdentifier} [POST] => clustercompanyRepository.search()
user/companies/{company}/masterId [PUT] => clustercompanyRepository.updateMasterId()
user/companies/{providerIdentifier} [POST] => clustercompanyRepository.create()
user/invitation/abort/{invitation} [DELETE] => invitationRepository.abort()
user/invitation/invite/{project} [POST] => invitationRepository.invite()
user/invitation/open/{project} [GET] => invitationRepository.getOpenInvitations()
user/oauth/{user}/connect [PUT] => clusteruserRepository.connectOAuthAccount()
user/subscriptions/{user} [PUT] => usersubscriptionRepository.update()
user/users/activate [POST] => clusteruserRepository.activate()
user/users/deletable/{user} [POST] => clusteruserRepository.isDeletable()
user/users/delete/email [DELETE] => clusteruserRepository.deleteByEmail()
user/users/exists [GET] => clusteruserRepository.exists()
user/users/find [GET] => clusteruserRepository.find()
user/users/find/all/{providerIdentifier} [POST] => clusteruserRepository.findAll()
user/users/password/reset/request [POST] => clusteruserRepository.requestPasswordReset()
user/users/password/reset/{user} [PUT] => clusteruserRepository.resetPassword()
user/users/preferredLanguage/{user} [PUT] => clusteruserRepository.setPreferredLanguage()
user/users/{provider} [POST] => clusteruserRepository.create()
user/users/{user} [DELETE] => clusteruserRepository.delete()
user/users/{user} [PUT] => clusteruserRepository.updateUser()
user/users/{user}/masterId [PUT] => clusteruserRepository.updateMasterId()
user/users/{user}/password [PUT] => clusteruserRepository.changePassword()
websockets/rooms [POST] => websocketRepository.getRooms()
websockets/rooms/all [POST] => websocketRepository.getAllRooms()
