import RepositoryCollection from './Repository/RepositoryCollection';
import { TRepositories } from './typescript/interfaces/global/repos';
import { IClientConnectArgs } from './typescript/interfaces/360ApiClient.interface';
import BadRequestError from './Connection/BadRequestError';
import SessionConnector from './Connection/SessionConnector';
import MarketPlaceConsts from './Repository/Constants/Marketplace';
import RefreshTokenInvalidError from './Connection/RefreshTokenInvalidError';
declare class LeankoalaClient {
    private _clusterConnection;
    private _masterConnection;
    private _user;
    private _companies;
    private _currentCompany;
    private _axios;
    private readonly _environment;
    private _connectionStatus;
    private readonly _registeredEventListeners;
    private _masterToken;
    private _repositoryCollection;
    private _masterUser;
    private readonly _provider;
    private _refreshToken;
    private readonly _routes;
    private readonly _headerMeta;
    constructor(environment?: string, provider?: string, headerMeta?: {});
    connect(args: IClientConnectArgs): Promise<any>;
    isConnected(): boolean;
    getEnvironment(): string;
    setLanguage(language: any): void;
    getWakeUpToken(): string;
    private _initConnection;
    private _initConnectionViaWakeUpToken;
    private _initConnectionViaCredentials;
    private static _assertAxios;
    private _initConnectionViaSessionToken;
    private _initConnectionViaDeprecatedSessionTokenAndConfirmCode;
    private _handleLoginData;
    private _initConnectionViaRefreshToken;
    private _initConnectionViaMasterTokens;
    private _autoSelectCompany;
    switchCompany(companyId: string): Promise<void>;
    private _switchCluster;
    private _getMasterServer;
    private _registerConnectionListeners;
    getRepository(entityType: TRepositories): Promise<any>;
    getRepositoryCollection(): Promise<RepositoryCollection>;
    private _sleep;
    getUser(): any;
    getCompany(): boolean;
    on(eventName: string, callback: CallableFunction): void;
    fetchAll(promises: any): Promise<any>;
    isWakeUpTokenExpired(token: any): boolean;
    setRefreshToken(token: string): void;
    setMemory(application: any, key: any, value: any): Promise<void>;
}
export { LeankoalaClient, BadRequestError, MarketPlaceConsts, RefreshTokenInvalidError, SessionConnector };
