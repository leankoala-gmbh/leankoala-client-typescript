{
  "version": 3,
  "sources": ["../src/360ApiClient.ts", "../src/Connection/Connection.ts", "../src/Connection/BadRequestError.ts", "../src/Connection/ForbiddenError.ts", "../src/Connection/RefreshTokenInvalidError.ts", "../src/Repository/Repository.ts", "../src/Repository/Entities/SequenceRepository.ts", "../src/Repository/Entities/MarketplaceRepository.ts", "../src/Repository/Entities/SubscriptionRepository.ts", "../src/Repository/Entities/CrawlerRepository.ts", "../src/Repository/Entities/CustomerHaendlerbundRepository.ts", "../src/Repository/Entities/CustomerHaendlerbundMetricRepository.ts", "../src/Repository/Entities/CustomerMehrwertsteuercheckRepository.ts", "../src/Repository/Entities/MemoryRepository.ts", "../src/Repository/Entities/ScoreRepository.ts", "../src/Repository/Entities/AlertingPolicyRepository.ts", "../src/Repository/Entities/AlertingChannelRepository.ts", "../src/Repository/Entities/WebsocketRepository.ts", "../src/Repository/Entities/MetricRepository.ts", "../src/Repository/Entities/AuthRepository.ts", "../src/Repository/Entities/ClusterUserRepository.ts", "../src/Repository/Entities/UserRepository.ts", "../src/Repository/Entities/UserSubscriptionRepository.ts", "../src/Repository/Entities/InvitationRepository.ts", "../src/Repository/Entities/ClusterCompanyRepository.ts", "../src/Repository/Entities/ComponentRepository.ts", "../src/Repository/Entities/ProjectRepository.ts", "../src/Repository/Entities/SystemRepository.ts", "../src/Repository/Entities/ScreenshotRepository.ts", "../src/Repository/Entities/ToolRepository.ts", "../src/Repository/Entities/CheckRepository.ts", "../src/Repository/Entities/CheckLighthouseRepository.ts", "../src/Repository/Entities/CheckA11yRepository.ts", "../src/Repository/Entities/CheckBrokenResourceRepository.ts", "../src/Repository/Entities/CheckJavaScriptErrorsRepository.ts", "../src/Repository/Entities/CheckFileSizeRepository.ts", "../src/Repository/Entities/CheckSitemapRepository.ts", "../src/Repository/Entities/CheckMobileFriendlyRepository.ts", "../src/Repository/Entities/CheckCertificateRepository.ts", "../src/Repository/Entities/CheckInsecureContentRepository.ts", "../src/Repository/Entities/CheckCookieRepository.ts", "../src/Repository/Entities/CheckDeadLinksRepository.ts", "../src/Repository/Entities/CheckHealthCheckRepository.ts", "../src/Repository/Entities/NixstatsRepository.ts", "../src/Repository/Entities/IncidentRepository.ts", "../src/Repository/Entities/ApplicationRepository.ts", "../src/Repository/Entities/LocationRepository.ts", "../src/Repository/Entities/CompanyRepository.ts", "../src/Repository/Entities/Auth2Repository.ts", "../src/Repository/Entities/TwoFactorRepository.ts", "../src/Repository/RepositoryCollection.ts", "../src/Connection/SessionConnector.ts", "../src/Repository/Constants/Marketplace.ts"],
  "sourcesContent": ["import axios from 'axios'\nimport Connection from './Connection/Connection'\n\nimport RepositoryCollection from './Repository/RepositoryCollection'\nimport {TRepositories} from './typescript/interfaces/global/repos'\nimport {\n  IClientConnectArgs,\n  IInitConnectionArgs, IInitConnectionViaDeprecatedJwtAndConfirmCode,\n  IInitConnectionViaMasterTokens,\n  IInitConnectionViaWakeUpTokenArgs,\n  ISwitchClusterArgs,\n  ITokenObject,\n} from './typescript/interfaces/360ApiClient.interface'\nimport {EEnvironment, EServer} from './Repository/Constants/Enviroment'\nimport BadRequestError from './Connection/BadRequestError'\nimport SessionConnector from './Connection/SessionConnector'\nimport MarketPlaceConsts from './Repository/Constants/Marketplace'\nimport RefreshTokenInvalidError from './Connection/RefreshTokenInvalidError'\n\n/**\n * The KoalityEngine client is used to connect to an instance of the KoalityEngine\n * and process all needed tasks.\n *\n * @author Nils Langner (nils.langner@leankoala.com)\n * @created 2020-07-05\n */\nclass LeankoalaClient {\n  private _clusterConnection: any\n  private _masterConnection: any\n  private _user: any\n  private _companies: any\n  private _currentCompany: boolean\n  private _axios: boolean\n  private readonly _environment: string\n  private _connectionStatus: string\n  private readonly _registeredEventListeners: any\n  private _masterToken: string | undefined\n  private _repositoryCollection: RepositoryCollection\n  private _masterUser: any\n  private readonly _provider: string\n  private _refreshToken: string | undefined\n  private readonly _routes: {\n    masterRefresh: { path: string; method: string; version: number }\n    clusterRefresh: { path: string; method: string; version: number }\n  }\n  private readonly _headerMeta: any\n\n  /**\n   * Create a client and set the environment\n   *\n   * @param {String} environment the environment (development|production)\n   * @param {String} provider the api provider\n   */\n  constructor(environment = 'production', provider = 'koality', headerMeta = {}) {\n    this._repositoryCollection = new RepositoryCollection()\n    this._clusterConnection = false\n    this._masterConnection = false\n    this._user = {}\n    this._companies = {}\n    this._currentCompany = false\n    this._axios = false\n    this._environment = environment\n    this._connectionStatus = 'disconnected'\n    this._registeredEventListeners = {}\n    this._masterToken = ''\n    this._provider = provider\n    this._headerMeta = headerMeta\n    this._routes = {\n      masterRefresh: {\n        version: 1,\n        path: '{application}/auth/refresh/{user}',\n        method: 'POST'\n      },\n      clusterRefresh: {\n        version: 1,\n        path: 'auth/tokens/refresh/{user_id}',\n        method: 'POST'\n      }\n    }\n  }\n\n  /**\n   * Connect to the API server and retrieve the JWT for later requests.\n   *\n   * @param {Object} args\n   * @param {String} [args.username] the username for the user that should be logged in\n   * @param {String} [args.password] the password for the given user\n   * @param {String} [args.wakeUpToken] the wakeup token can be used to log in instead of username and password\n   * @param {String} [args.accessToken] the token fill this in the client generator\n   * @param {Boolean} [args.withMemories] return the users memory on connect\n   * @param {String} [args.language] the preferred language (default: en; implemented: de, en)\n   * @param {Object} [args.axiosAdapter] the preferred language (default: en; implemented: de, en)\n   * @param {Object} [args.autoSelectCompany] auto select the company (and cluster) (default: false)\n   *\n   * @param {function} [args.axios] a predefined axios instance\n   */\n  async connect(args: IClientConnectArgs) {\n    args.autoSelectCompany = args.autoSelectCompany || false\n    this._connectionStatus = 'connecting'\n\n    let result;\n\n    try {\n      this._repositoryCollection = new RepositoryCollection()\n      result = await this._initConnection({...args, axios})\n    } catch (error) {\n      this._connectionStatus = 'disconnected'\n      throw error\n    }\n\n    this._connectionStatus = 'connected'\n\n    return result\n  }\n\n  /**\n   * Return true if the client has valid and not expired refresh tokens.\n   *\n   * @return {boolean}\n   */\n  isConnected() {\n    if (!this._masterConnection) return false\n\n    return Math.floor(Date.now() / 1000) < this._masterConnection.getExpireDate()\n  }\n\n  public getEnvironment(): string {\n    return this._environment\n  }\n\n  /**\n   * Set the preferred language for the API results.\n   *\n   * The language can already be added when connecting.\n   *\n   * @param {String} language\n   */\n  setLanguage(language) {\n    this._masterConnection.setLanguage(language)\n    if (this._clusterConnection) {\n      this._clusterConnection.setLanguage(language)\n    }\n  }\n\n  /**\n   * Return the current refresh token.\n   *\n   * It can be used to reactivate the connection without using the username and\n   * password.\n   *\n   * @return {String}\n   */\n  getWakeUpToken(): string {\n    const tokenObject: ITokenObject = {\n      master: this._masterConnection.getWakeUpToken(),\n      company: this._currentCompany,\n      user: this.getUser(),\n      cluster: this._clusterConnection\n        ? this._clusterConnection.getWakeUpToken()\n        : null\n    }\n\n    return JSON.stringify(tokenObject)\n  }\n\n  /**\n   * Initialize the connection object and connect to the server\n   *\n   * @param {Object} args see connect function\n   *\n   * @private\n   */\n\n  private async _initConnection(args: IInitConnectionArgs): Promise<any> {\n    this._axios = args.axios\n    let result = null;\n    if ('noLogin' in args) {\n      this._masterConnection = new Connection(this._getMasterServer(), args.axios, this._provider, this._headerMeta)\n      this._repositoryCollection.setMasterConnection(this._masterConnection)\n    } else if ('sessionToken' in args) {\n      await this._initConnectionViaSessionToken(args as IClientConnectArgs)\n    } else if ('wakeUpToken' in args) {\n      await this._initConnectionViaWakeUpToken(args)\n    } else if ('accessToken' in args && args.accessToken) {\n      await this._initConnectionViaMasterTokens(args)\n    } else if ('refreshToken' in args) {\n      await this._initConnectionViaRefreshToken(args)\n    }  else if ('deprecatedSessionTokenAndConfirmCode' in args && 'deprecatedSessionToken' in args && 'confirmationCode' in args) {\n      result = await this._initConnectionViaDeprecatedSessionTokenAndConfirmCode(args as IInitConnectionViaDeprecatedJwtAndConfirmCode)\n    } else {\n      await this._initConnectionViaCredentials(args)\n    }\n\n    this._registerConnectionListeners()\n\n    return result\n  }\n\n  /**\n   * Initialize the connection using a wake up token.\n   *\n   * @param {Object} args\n   *\n   * @returns {Promise<void>}\n   *\n   * @private\n   */\n  private async _initConnectionViaWakeUpToken(args: IInitConnectionViaWakeUpTokenArgs) {\n    if (!('wakeUpToken' in args)) throw new Error('WakeUp Token is missing')\n    const wakeUpToken = JSON.parse(args.wakeUpToken)\n    this._masterUser = wakeUpToken.user\n    this._currentCompany = wakeUpToken.company\n\n    this._masterConnection = new Connection(this._getMasterServer(), args.axios, this._provider, this._headerMeta)\n\n    const masterConnectionArgs = args\n    const masterWakeUpToken = wakeUpToken.master\n    masterWakeUpToken.user.id = this._masterUser.masterId\n    masterConnectionArgs.wakeUpToken = JSON.stringify(masterWakeUpToken)\n    this._masterConnection.setRefreshRoute(this._routes.masterRefresh)\n    await this._masterConnection.connect(masterConnectionArgs)\n    this._repositoryCollection.setMasterConnection(this._masterConnection)\n\n    const user = this._masterConnection.getUser()\n    this._masterUser.preferredLanguage = user.preferredLanguage\n    this._masterUser.threeSixtyId = user.threeSixtyId\n\n\n    if (wakeUpToken.company) {\n      this._clusterConnection = new Connection(wakeUpToken.company.cluster.apiEndpoint, args.axios, this._provider, this._headerMeta)\n      this._clusterConnection.setRefreshRoute(this._routes.clusterRefresh)\n      const clusterConnectionArgs = args\n      clusterConnectionArgs.wakeUpToken = JSON.stringify(wakeUpToken.cluster)\n      await this._clusterConnection.connect(clusterConnectionArgs)\n      this._repositoryCollection.setClusterConnection(this._clusterConnection)\n    }\n  }\n\n  private async _initConnectionViaCredentials(args: IClientConnectArgs) {\n    const apiServer = this._getMasterServer()\n\n    LeankoalaClient._assertAxios(args)\n    this._axios = args.axios\n\n    this._masterConnection = new Connection(apiServer, this._axios, this._provider, this._headerMeta)\n\n    const route = {version: 1, path: '{application}/auth/login', method: 'POST'}\n\n    const withMemories = Boolean(args.withMemories || false)\n\n    const result = await this._masterConnection.send(\n      route,\n      {\n        emailOrUserName: args.username,\n        password: args.password,\n        application: this._provider,\n        withMemories\n      },\n      true\n    )\n\n    this._handleLoginData(result)\n\n    if (args.autoSelectCompany) {\n      await this._autoSelectCompany()\n    }\n  }\n\n  /**\n   * Assert that the args parameter contain a valid axios HTTP client.\n   *\n   * @param args\n   * @private\n   */\n  private static _assertAxios(args: IClientConnectArgs) {\n    if (!('axios' in args)) {\n      throw new Error('Missing parameter axios. The HTTP client must be injected.')\n    }\n\n    if (typeof args.axios !== 'function') {\n      throw new Error(\n        'The axios argument is not a function. Seems like it is not a valid axios object,'\n      )\n    }\n  }\n\n  private async _initConnectionViaSessionToken(args: IClientConnectArgs) {\n    const apiServer = this._getMasterServer()\n\n    LeankoalaClient._assertAxios(args)\n    this._axios = args.axios\n\n    this._masterConnection = new Connection(apiServer, this._axios, this._provider, this._headerMeta)\n    // TODO: Check if we can make the path whitelabeld\n    const route = {version: 1, path: '360/auth/session', method: 'POST'}\n\n    const withMemories = Boolean(args.withMemories || false)\n\n    const result = await this._masterConnection.send(\n      route,\n      {\n        sessionToken: args.sessionToken,\n        withMemories\n      },\n      true\n    )\n\n    this._handleLoginData(result)\n\n    if (args.autoSelectCompany) {\n      await this._autoSelectCompany()\n    }\n  }\n\n  private async _initConnectionViaDeprecatedSessionTokenAndConfirmCode(args: IInitConnectionViaDeprecatedJwtAndConfirmCode) {\n    const apiServer = this._getMasterServer()\n\n    LeankoalaClient._assertAxios(args)\n    this._axios = args.axios\n\n    this._masterConnection = new Connection(apiServer, this._axios, this._provider, this._headerMeta)\n\n    const route = {version: 1, path: '{application}/auth/session-deprecated/confirm', method: 'POST'}\n\n    const withMemories = Boolean(args.withMemories || false)\n\n    const result = await this._masterConnection.send(\n      route,\n      {\n        deprecatedSessionToken: args.deprecatedSessionToken,\n        confirmationCode: args.confirmationCode,\n        withMemories\n      },\n      true\n    )\n\n    this._handleLoginData(result)\n\n    if (args.autoSelectCompany) {\n      await this._autoSelectCompany()\n    }\n\n    return result\n  }\n\n  /**\n   * The login function always returns the same data. This method handles it and initializes the\n   * client.\n   *\n   * @param loginData\n   * @private\n   */\n  private _handleLoginData(loginData) {\n    this._masterToken = loginData.token\n    this._refreshToken = loginData.refreshToken\n    this._masterUser = loginData.user\n    this._masterConnection.setUser(loginData.user)\n    this._masterUser.masterId = loginData.user.id\n    if (loginData.memories) {\n      this._masterUser.memories = loginData.memories\n    }\n    this._companies = loginData.companies\n\n    this._masterConnection.setAccessToken(this._masterToken, this._refreshToken)\n    this._repositoryCollection.setMasterConnection(this._masterConnection)\n  }\n\n  private async _initConnectionViaRefreshToken(args: IClientConnectArgs) {\n    this._masterConnection = new Connection(this._getMasterServer(), args.axios, this._provider, this._headerMeta)\n    this._masterConnection.setRefreshRoute(this._routes.masterRefresh)\n    await this._masterConnection.connect(args)\n\n    this._masterUser = this._masterConnection.getUser()\n    this._masterUser.masterId = this._masterUser.id\n    this._masterToken = this._masterConnection.getAccessToken()\n    this._companies = this._masterUser.companies\n    this._repositoryCollection.setMasterConnection(this._masterConnection)\n\n    if (args.autoSelectCompany) {\n      await this._autoSelectCompany()\n    }\n  }\n\n  private async _initConnectionViaMasterTokens(args: IInitConnectionViaMasterTokens) {\n    this._masterConnection = new Connection(this._getMasterServer(), args.axios, this._provider, this._headerMeta)\n    this._masterConnection.setAccessToken(args.accessToken, args.refreshToken)\n    this._masterToken = args.accessToken\n\n    if ('user' in args) {\n      this._masterConnection.setUser(args.user)\n      this._user = args.user\n      this._user.masterId = args.user.id\n      this._masterUser = args.user\n      this._companies = args.user.companies\n    }\n\n    this._repositoryCollection.setMasterConnection(this._masterConnection)\n\n    if (args.autoSelectCompany) {\n      await this._autoSelectCompany()\n    }\n  }\n\n  private async _autoSelectCompany() {\n    if (this._companies.length === 0) {\n      throw new Error('Unable to auto select the company. User is not connected to any.')\n    }\n    const company = this._companies[0]\n\n    await this.switchCompany(company.id)\n  }\n\n  /**\n   * Returns the master server.\n   *\n   * @returns {string}\n   */\n  async switchCompany(companyId: string) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const client = this\n    let currentCompany\n    this._companies.forEach(function (company) {\n      if (company.id === companyId) {\n        currentCompany = company\n      }\n    })\n\n    if (currentCompany) {\n      await client._switchCluster(currentCompany.cluster)\n      this._currentCompany = currentCompany\n    } else {\n      throw new Error('Unable to select the company. Company id not connected to user.')\n    }\n  }\n\n  /**\n   * Returns the master server.\n   * @param cluster\n   * @private\n   */\n  private async _switchCluster(cluster: ISwitchClusterArgs) {\n    this._clusterConnection = new Connection(cluster.apiEndpoint, this._axios, this._provider, this._headerMeta)\n    this._repositoryCollection.setClusterConnection(this._clusterConnection)\n    this._clusterConnection.addDefaultParameter('masterUserId', this._masterUser.id)\n\n    await this._clusterConnection.connect({loginToken: this._masterToken})\n\n    const clusterUser = this._clusterConnection.getUser()\n    this._masterUser.clusterId = clusterUser.id\n    this._masterUser.id = clusterUser.id\n  }\n\n  /**\n   * Returns the master server.\n   * @returns {string}\n   */\n  private _getMasterServer() {\n    switch (this._environment) {\n      case EEnvironment.Local:\n        return EServer.Local\n      case EEnvironment.Stage:\n        return EServer.Stage\n      case EEnvironment.Production:\n        return EServer.Production\n      default:\n        throw new Error('The given environment \"' + this._environment + '\" is unknown.')\n    }\n  }\n\n  /**\n   * Register all known connections listeners.\n   *\n   * @private\n   */\n  private _registerConnectionListeners() {\n    const masterConnection = this._masterConnection\n    const clusterConnection = this._clusterConnection\n    const listeners = this._registeredEventListeners\n\n    Object.keys(listeners).forEach((key) => {\n      listeners[key].forEach((element) => {\n        masterConnection.on(key, element)\n        if (clusterConnection) {\n          clusterConnection.on(key, element)\n        }\n      })\n    })\n  }\n\n  /**\n   * Return the repository by the given name.\n   *\n   * Throws an exception if the repository is not known.\n   *\n   * @param {String} entityType\n   *\n   * @return {Repository}\n   *\n   * @throws {Error}\n   */\n  async getRepository(entityType: TRepositories): Promise<any> {\n    if (this._connectionStatus === 'disconnected') {\n      throw new Error('Please connect the client before running this method.')\n    }\n\n    if (this._connectionStatus === 'connected') {\n      return this._repositoryCollection.getRepository(entityType)\n    }\n\n    if (this._connectionStatus === 'connecting') {\n      while (this._connectionStatus === 'connecting') {\n        await this._sleep(300)\n      }\n      return this.getRepository(entityType)\n    }\n  }\n\n  /**\n   * Returns\n   */\n  async getRepositoryCollection(): Promise<RepositoryCollection> {\n    if (this._connectionStatus === 'disconnected') {\n      throw new Error('Please connect the client before running this method.')\n    }\n\n    if (this._connectionStatus === 'connected') {\n      return this._repositoryCollection\n    }\n\n    if (this._connectionStatus === 'connecting') {\n      while (this._connectionStatus === 'connecting') {\n        await this._sleep(300)\n      }\n      return this.getRepositoryCollection()\n    }\n\n    return this._repositoryCollection\n  }\n\n  /**\n   * Sleep for an amount of milliseconds.\n   *\n   * @param {Number} milliseconds\n   * @return {Promise}\n   *\n   * @private\n   */\n  private async _sleep(milliseconds: number): Promise<unknown> {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds))\n  }\n\n  /**\n   * Return the current cluster user.\n   *\n   * @return {Object}\n   */\n  getUser() {\n    if (!this._masterUser) {\n      throw new Error('No user found. Please run connect() to login in.')\n    }\n    return this._masterUser\n  }\n\n  /**\n   * Return the current company.\n   */\n  getCompany() {\n    return this._currentCompany\n  }\n\n  /**\n   * Register event handler.\n   *\n   * @param {String} eventName\n   * @param {CallableFunction} callback\n   */\n  on(eventName: string, callback: CallableFunction) {\n    if (!(eventName in this._registeredEventListeners)) {\n      this._registeredEventListeners[eventName] = []\n    }\n\n    this._registeredEventListeners[eventName].push(callback)\n\n    if (this._masterConnection) {\n      this._masterConnection.on(eventName, callback)\n    }\n\n    if (this._clusterConnection) {\n      this._clusterConnection.on(eventName, callback)\n    }\n  }\n\n  /**\n   * Return all resolved promises.\n   *\n   * @param promises\n   * @returns Object\n   */\n  async fetchAll(promises): Promise<any> {\n    const promiseArray: string[] = []\n    const results = {}\n    let count = 0\n\n    Object.keys(promises).forEach((element) => promiseArray.push(promises[element]))\n\n    const promiseResults = await Promise.allSettled(promiseArray)\n\n    Object.keys(promises).forEach((element) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      results[element] = promiseResults[count].value\n      count++\n    })\n\n    return results\n  }\n\n  /**\n   * Return true if the wake up token is expired.\n   *\n   * A wake up token is expired if the refresh token is expired.\n   *\n   * @param {string} token\n   * @returns {boolean}\n   */\n  isWakeUpTokenExpired(token) {\n    const {master, cluster} = JSON.parse(token)\n\n    const time = Math.floor(new Date().getTime() / 1000)\n\n    /** @todo this should be done in the connection  **/\n    if (!cluster || cluster.expireDate < time) {\n      return true\n    }\n\n    return !master || master.expireDate < time\n  }\n\n  /**\n   * Trigger Token Refresh\n   * @param { string } token\n   */\n  setRefreshToken(token: string) {\n    this._refreshToken = token\n  }\n\n  async setMemory(application, key, value) {\n    const memoryRepo = await this.getRepository('memory')\n    await memoryRepo.set('360monitoring', 'user', this.getUser().masterId, {key, value})\n    this._masterUser.memories[key] = value\n  }\n\n}\n\nexport {\n  LeankoalaClient,\n  BadRequestError,\n  MarketPlaceConsts,\n  RefreshTokenInvalidError,\n  SessionConnector\n}\n\n", "import jwtDecode from 'jwt-decode'\nimport BadRequestError from './BadRequestError'\nimport ForbiddenError from './ForbiddenError'\nimport RefreshTokenInvalidError from './RefreshTokenInvalidError'\nimport {\n  IConnectArgs,\n  IAssertValidResponsePayload, IAuthenticateArgs,\n  IConnectionSendResult,\n  IGetUrlArgs,\n  IGetWakeUpTokenResult, IRefreshAccessToken,\n  IRoute,\n  IUser, ISendHeaders\n} from '../typescript/interfaces/global/connection'\n\n/**\n * This class takes care of the connection between the KoalityEngine server and the client. It\n * handles the validation process, refreshes the tokens if needed and processes the servers response.\n *\n * events:\n *  - send (axios send data/parameters)\n *  - failure (BadRequestError)\n *  - error (Axios error)\n *\n * @author Nils Langner (nils.langner@leankoala.com)\n * @created 2020-07-07\n */\nclass Connection {\n  private _refreshRoute: { path: string; method: string; version: number }\n  private _accessToken: string\n  private _refreshToken: string\n  private _user: Partial<IUser> = {}\n  private _accessExpireTimestamp: number\n  private _refreshExpireTimestamp: number\n  private readonly _apiServer: string\n  private _preferredLanguage: string\n  private readonly _axios: any\n  private _axiosAdapter: boolean\n  private readonly _provider: string\n  private readonly _defaultParameters: Partial<IGetUrlArgs> = {}\n  private readonly _registeredEventListeners: object\n  private readonly _routes: {\n    authenticateByPassword: { path: string; method: string; version: number }\n    authenticateByToken: { path: string; method: string; version: number }\n  }\n\n  private _connectionArgs: any\n  private _headerMeta: any\n\n  /**\n   * Init routes and set default values\n   *\n   * @param apiServer\n   * @param {function} axios\n   * @param {string} provider api provider\n   */\n  constructor(apiServer: string, axios, provider, headerMeta) {\n    this._refreshRoute = {\n      version: 1,\n      path: 'auth/tokens/refresh/{user_id}',\n      method: 'POST'\n    }\n    this._accessToken = ''\n    this._refreshToken = ''\n    this._user = {}\n    this._accessExpireTimestamp = 0\n    this._refreshExpireTimestamp = 0\n    this._apiServer = apiServer\n    this._preferredLanguage = 'en'\n    this._axios = axios\n    this._axiosAdapter = false\n    this._defaultParameters = {}\n    this._registeredEventListeners = {}\n    this._provider = provider\n    this._routes = {\n      authenticateByPassword: {\n        version: 1,\n        path: 'auth/tokens/access',\n        method: 'POST'\n      },\n      authenticateByToken: {\n        version: 1,\n        path: 'auth/tokens/token/{masterUserId}',\n        method: 'POST'\n      }\n    }\n    this._headerMeta = headerMeta\n  }\n\n  /**\n   * Connect to the KoalityEngine server and fetch the tokens and user information.\n   *\n   * @param {Object} args\n   * @param {String} args.username the user name for the user that should be logged in\n   * @param {String} args.password the password for the given user\n   * @param {String} args.wakeUpToken the wakeup token can be used to log in instead of username and pasword\n   * @param {Boolean} args.withMemories return the users memory on connect\n   * @param {String} [args.language] the preferred language\n   */\n  async connect(args: IConnectArgs) {\n    const defaultArgs = {}\n    this._connectionArgs = Object.assign(defaultArgs, args)\n\n    if (args.language) { this.setLanguage(args.language) }\n\n    if (args.axiosAdapter) { this._axiosAdapter = args.axiosAdapter }\n\n    if (args.refreshToken) {\n      if (!args.userId) {\n        throw new Error('When connecting via refresh token the userId is also mandatory.')\n      }\n      this._user = {id: args.userId}\n      this._refreshToken = args.refreshToken\n      this._accessExpireTimestamp = 0\n      await this.refreshAccessToken(true, args.withMemories)\n\n    } else if (args.accessToken) {\n      this.setAccessToken(args.accessToken, args.refreshToken)\n      this._accessExpireTimestamp = (Date.now() / 1000) + 60\n\n    } else if (args.wakeUpToken) {\n      await this._connectByWakeUpToken(args)\n\n    } else {\n      let withMemories = false\n\n      if (!this._connectionArgs.loginToken) {\n        if (!this._connectionArgs.username) {\n          throw new Error('Mandatory username is missing')\n        }\n\n        if (!this._connectionArgs.password) {\n          throw new Error('Mandatory password is missing')\n        }\n      }\n\n      if (this._connectionArgs.withMemories) {\n        withMemories = this._connectionArgs.withMemories\n      }\n\n      await this._authenticate({\n        username: args.username,\n        password: args.password,\n        withMemories,\n        loginToken: args.loginToken\n      })\n    }\n  }\n\n  /**\n   * Establish the connection via wake up token.\n   *\n   * The token must be generated via the getWakeUpToken() method.\n   *\n   * @param args\n   * @returns {Promise<void>}\n   *\n   * @private\n   */\n  private async _connectByWakeUpToken(args: IConnectArgs) {\n    if (!args.wakeUpToken) return\n    const wakeUpToken = JSON.parse(args.wakeUpToken)\n    this._refreshToken = wakeUpToken.refreshToken\n    this._user = wakeUpToken.user\n    this._refreshExpireTimestamp = wakeUpToken.expireDate\n    this._accessExpireTimestamp = 0\n    this.setLanguage(args.preferred_language)\n    await this.refreshAccessToken(true, args.withMemories)\n  }\n\n  getAccessToken(): string {\n    return this._accessToken\n  }\n\n  /**\n   * Return the expire date (timestamp) of the refresh token\n   *\n   * @return {Number}\n   */\n  getExpireDate(): number {\n    return this._refreshExpireTimestamp\n  }\n\n  /**\n   * Return a wake up token\n   *\n   * This token can be used to wake the connection up without re-entering the username\n   * and password.\n   *\n   * @return {object}\n   */\n  getWakeUpToken(): IGetWakeUpTokenResult {\n    return {\n      refreshToken: this._refreshToken,\n      user: this.getUser(),\n      expireDate: this.getExpireDate(),\n      apiServer: this._apiServer\n    }\n  }\n\n  /**\n   * Return the current user that is logged in.\n   *\n   * @return {object}\n   */\n  getUser() {\n    return this._user\n  }\n\n  /**\n   * Get the effective url that will be called depending on path, server and value.\n   *\n   * It will replace placeholder strings by the actual values from the given\n   * arguments.\n   *\n   * @param {String} route\n   * @param {Object} args\n   *\n   * @return {string}\n   *\n   * @private\n   */\n  private _getUrl(route: IRoute, args: IGetUrlArgs|object): string {\n    const plainPath = route.path\n    const version = route.version\n    const apiServer = this._apiServer\n\n    if (!apiServer) {\n      throw new Error('Unable to create the url. ApiServer parameter is missing.')\n    }\n\n    let url = `${apiServer}v${version}/${plainPath}`\n    const matches = url.match(/{(.*?)}/gi)\n\n    if (matches !== null) {\n      matches.forEach(function (match) {\n        const varName = match.replace('{', '').replace('}', '')\n        if (args[varName]) {\n          url = url.replace(match, args[varName])\n        } else {\n          throw new Error('The mandatory parameter ' + varName + ' is missing in the arguments object.')\n        }\n      })\n    }\n\n    return url.replace(/(https?:\\/\\/)|(\\/)+/g, '$1$2')\n  }\n\n  /**\n   * Send a request to the KoalityEngine and handle the result.\n   *\n   * @event send\n   * @event error\n   *\n   * @param {Object} route\n   * @param {Object} data\n   * @param {Boolean} withoutToken\n   *\n   * @return {Array}\n   */\n  async send(route: IRoute, data: object | {[key: string]: string}, withoutToken = false): Promise<IRefreshAccessToken> {\n\n    const headers: ISendHeaders = {\n      'accept-language': this._preferredLanguage\n    }\n\n    Object.entries(this._headerMeta).forEach(([key, value]: [string, unknown]) => {\n      headers[key] = String(value)\n    })\n\n    if (!withoutToken) {\n      await this.refreshAccessToken()\n      headers.Authorization = `Bearer ${this._accessToken}`\n    }\n\n    const defaultParameters = Object.assign({}, this._defaultParameters)\n    const fullData = {...defaultParameters, ...data}\n    const method = route.method.toUpperCase()\n    const url = this._getUrl(route, fullData)\n\n    let response\n\n    try {\n      const parameters = {method, url, data: fullData, headers, adapter: this._axiosAdapter}\n      this._publish('send', parameters)\n      response = await this._axios(parameters)\n\n    } catch (err: any) {\n      if (err.response) {\n        response = err.response\n      } else {\n        this._publish('error', err)\n        throw err\n      }\n    }\n\n    this._publish('response', response)\n    this._assertValidResponse(response, url, data)\n    return response.data.data\n  }\n\n  /**\n   * Set the preferred language for the API results\n   *\n   * @param  {String} language\n   */\n  setLanguage(language) {\n    this._preferredLanguage = language\n  }\n\n  /**\n   * Add a default parameter to every request that gets send.\n   *\n   * @param key\n   * @param value\n   */\n  addDefaultParameter(key, value) {\n    this._defaultParameters[key] = value\n  }\n\n  /**\n   * Throw an exception if the response is not a valid or successful KoalityEngine response.\n   *\n   * @event failure\n   *\n   * @param {Object} response\n   * @param {String} url\n   * @param {Array} data\n   *\n   * @private\n   */\n  _assertValidResponse(response: IConnectionSendResult, url: string, data: IGetUrlArgs|object) {\n    const responseData = response.data\n    if (responseData.status !== 'success') {\n      const payload: IAssertValidResponsePayload = {message: responseData.message, url, data}\n      if (responseData.identifier) {\n        payload.identifier = responseData.identifier\n      }\n      this._publish('failure', payload)\n      if (response.status === 403) {\n        throw new ForbiddenError(responseData.message)\n      } else {\n        throw new BadRequestError(payload)\n      }\n    }\n  }\n\n  /**\n   * Authenticate the user using username and password.\n   *\n   * This function will set the access and refresh tokens that are used afterwards for authentication.\n   *\n   * @param {Object} args\n   *\n   * @private\n   */\n  async _authenticate(args: IAuthenticateArgs) {\n    let tokens\n    if (args.username) {\n      tokens = await this.send(this._routes.authenticateByPassword, {\n        username: args.username,\n        password: args.password,\n        with_memories: args.withMemories,\n        withMemories: args.withMemories\n      }, true)\n    } else if (args.loginToken) {\n      tokens = await this.send(this._routes.authenticateByToken, {\n        access_token: args.loginToken,\n        with_memories: args.withMemories,\n        withMemories: args.withMemories\n      }, true)\n    } else {\n      throw new Error('User name or login token is not set. At least one of them must be set..')\n    }\n\n    this.setAccessToken(tokens.token, tokens.refresh_token)\n    this._user = tokens.user\n\n    this._user.memories = tokens.memories\n\n    this._refreshTokenExpireDate(true)\n  }\n\n  /**\n   * Refresh the expire date.\n   *\n   * This function should be called after a new token is generated.\n   *\n   * @param {Boolean} withRefreshToken\n   *\n   * @private\n   */\n  _refreshTokenExpireDate(withRefreshToken = false) {\n    const accessTokenData = jwtDecode(this._accessToken) as { ttl: number }\n    this._accessExpireTimestamp = Math.floor(Date.now() / 1000) + accessTokenData.ttl\n\n    if (withRefreshToken) {\n      const refreshTokenData = jwtDecode(this._refreshToken) as { ttl: number }\n      this._refreshExpireTimestamp = Math.floor(Date.now() / 1000) + refreshTokenData.ttl\n    }\n  }\n\n  /**\n   * Set the access token.\n   *\n   * @param {String} token\n   * @param {String} refreshToken\n   */\n  setAccessToken(token, refreshToken) {\n    this._accessToken = token\n\n    let withRefreshToken = false\n\n    if (refreshToken) {\n      this._refreshToken = refreshToken\n      withRefreshToken = true\n    }\n\n    this.addDefaultParameter('access_token', token)\n    this._refreshTokenExpireDate(withRefreshToken)\n  }\n\n  /**\n   * Use the refresh token to create a new access token.\n   *\n   * Th\u00EDs function should be used if the user access rights have changed e.g. when a new project\n   * has been created.\n   *\n   * @param {boolean} forceRefresh\n   * @param {boolean} withMemories\n   */\n  async refreshAccessToken(forceRefresh = false, withMemories = false) {\n    if (forceRefresh || Math.floor(Date.now() / 1000) + 10 > this._accessExpireTimestamp) {\n      const user = this.getUser()\n\n      let tokens: Partial<IRefreshAccessToken> = {}\n      try {\n        tokens = await this.send(this._refreshRoute, {\n          user_id: user.id,\n          user: user.id,\n          access_token: this._refreshToken,\n          with_memories: withMemories,\n          withMemories: withMemories,\n          application: this._provider\n        }, true)\n        if (tokens.user) {\n          this._user = tokens.user\n        }\n\n      } catch (error: any) {\n        this._publish('refresh.invalid', {message: error.message})\n        throw new RefreshTokenInvalidError(error.message)\n      }\n\n      if (tokens.memories) {\n        this._user.memories = tokens.memories\n      }\n\n      this.setAccessToken(tokens.token, this._refreshToken)\n    }\n  }\n\n  setUser(user) {\n    this._user = user\n  }\n\n  /**\n   * Set the refresh route for this connection\n   *\n   * @param {string} route\n   */\n  setRefreshRoute(route) {\n    this._refreshRoute = route\n  }\n\n  /**\n   * Register a callback for an internal published event.\n   *\n   * @param {String} eventName\n   * @param {CallableFunction} callback\n   */\n  on(eventName, callback) {\n    if (!(eventName in this._registeredEventListeners)) {\n      this._registeredEventListeners[eventName] = []\n    }\n    this._registeredEventListeners[eventName].push(callback)\n  }\n\n  /**\n   * Publish an internal event.\n   *\n   * @param {String} eventName\n   * @param {Object} payload\n   *\n   * @private\n   */\n  _publish(eventName, payload) {\n    if (eventName in this._registeredEventListeners) {\n      this._registeredEventListeners[eventName].forEach(element => {\n        element(payload)\n      })\n    }\n  }\n}\n\nexport default Connection\n", "class BadRequestError extends Error {\n  url: string\n  data: any\n  protected identifier: any\n\n  constructor(errorData) {\n    super(errorData.message)\n    this.url = errorData.url\n    this.data = errorData.data\n\n    if (errorData.identifier) {\n      this.identifier = errorData.identifier\n    }\n  }\n}\n\nexport default BadRequestError\n", "class ForbiddenError extends Error {\n}\n\nexport default ForbiddenError\n", "class RefreshTokenInvalidError extends Error {\n}\n\nexport default RefreshTokenInvalidError\n\n", "export default class Repository {\n  protected connectionType: string\n  protected connection: any\n\n  constructor() {\n    this.connectionType = 'MasterConnection'\n  }\n\n  /**\n   * Throw an exception if a mandatory argument is not set.\n   *\n   * @param requiredArguments\n   * @param actualArguments\n   * @private\n   */\n  protected _assertValidArguments(requiredArguments: any[], actualArguments: any) {\n    requiredArguments.forEach(function (argument) {\n      if (!(argument in actualArguments)) {\n        throw new Error(\n          `The mandatory argument ${argument} could not be found in the argument object.`\n        )\n      }\n    })\n  }\n\n  setConnection(connection) {\n    this.connection = connection\n  }\n\n  getConnectionType() {\n    return this.connectionType\n  }\n}\n", "import Repository from '../Repository'\n\n\nexport interface ICreateSequenceArguments {\n  name: string\n  startUrl: string\n  steps?: any[]\n}\n\nexport interface IUpdateSequenceArguments {\n  name?: string\n  startUrl?: string\n  steps?: any[]\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass SequenceRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Get a list of possible commands\n   *\n   * request url: /kapi/v1/sequences/{project}/commands\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getCommands(project): Promise<any> {\n    const route = { path: 'sequences/{project}/commands', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get a list of possible commands\n   *\n   * request url: /kapi/v1/sequences/{project}/sequences\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getSequences(project): Promise<any> {\n    const route = { path: 'sequences/{project}/sequences', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a new sequence.\n   *\n   * request url: /kapi/v1/sequences/{project}/sequence\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.name The human readable name of the sequence.\n   * @param {String} args.startUrl The url the sequence starts at.\n   * @param {Array} args.steps List of steps of the sequence. (optional)\n   */\n  async createSequence(project, args: ICreateSequenceArguments): Promise<any> {\n    const route = { path: 'sequences/{project}/sequence', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['name', 'startUrl']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update an existing sequence\n   *\n   * request url: /kapi/v1/sequences/{project}/sequence\n   * request method: PUT\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.name The human readable name of the sequence. (optional)\n   * @param {String} args.startUrl The url the sequence starts at. (optional)\n   * @param {Array} args.steps List of steps of the sequence. (optional)\n   */\n  async updateSequence(project, args: IUpdateSequenceArguments): Promise<any> {\n    const route = { path: 'sequences/{project}/sequence', method: 'PUT', version: 1 }\n    const argList = Object.assign({ project }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Activate an existing sequence.\n   *\n   * request url: /kapi/v1/sequences/{sequence}/activate\n   * request method: PUT\n   *\n   * @param sequence\n   * @param {Object} args\n   */\n  async activateSequence(sequence): Promise<any> {\n    const route = { path: 'sequences/{sequence}/activate', method: 'PUT', version: 1 }\n    const argList = Object.assign({ sequence }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Deactivate an existing sequence.\n   *\n   * request url: /kapi/v1/sequences/{sequence}/deactivate\n   * request method: PUT\n   *\n   * @param sequence\n   * @param {Object} args\n   */\n  async deactivateSequence(sequence): Promise<any> {\n    const route = { path: 'sequences/{sequence}/deactivate', method: 'PUT', version: 1 }\n    const argList = Object.assign({ sequence }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of recent runs.\n   *\n   * request url: /kapi/v1/sequences/{sequence}/recent\n   * request method: GET\n   *\n   * @param sequence\n   * @param {Object} args\n   */\n  async getRecentRuns(sequence): Promise<any> {\n    const route = { path: 'sequences/{sequence}/recent', method: 'GET', version: 1 }\n    const argList = Object.assign({ sequence }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default SequenceRepository\n", "import Repository from '../Repository'\n\n\nexport interface ISetComponentArguments {\n  url: string\n}\n\nexport interface IGetHealthStatusArguments {\n  from?: string\n  time?: string\n}\n\nexport interface IActivateFeatureArguments {\n  projects: any[]\n}\n\nexport interface IDeactivateFeatureArguments {\n  projects: any[]\n}\n\nexport interface IGetAvailableFeaturesArguments {\n  status?: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass MarketplaceRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return all features that are active for the given project.\n   *\n   * request url: /kapi/v1/marketplace/features/project/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getActiveProjectFeatures(project): Promise<any> {\n    const route = { path: 'marketplace/features/project/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all features that are active for the given provider.\n   *\n   * request url: /kapi/v1/marketplace/features/provider/{providerIdentifier}\n   * request method: GET\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   */\n  async getActiveProviderFeatures(providerIdentifier): Promise<any> {\n    const route = { path: 'marketplace/features/provider/{providerIdentifier}', method: 'GET', version: 1 }\n    const argList = Object.assign({ providerIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all component suggestions that are enabled by the active features.\n   *\n   * request url: /kapi/v1/marketplace/features/components/{system}/{featureIdentifier}\n   * request method: GET\n   *\n   * @param system\n   * @param featureIdentifier\n   * @param {Object} args\n   */\n  async getComponents(system, featureIdentifier): Promise<any> {\n    const route = { path: 'marketplace/features/components/{system}/{featureIdentifier}', method: 'GET', version: 1 }\n    const argList = Object.assign({ system, featureIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set a component using a given suggestion as template.\n   *\n   * request url: /kapi/v1/marketplace/features/components/{system}/{suggestionIdentifier}\n   * request method: POST\n   *\n   * @param system\n   * @param suggestionIdentifier\n   * @param {Object} args\n   * @param {String} args.url \n   */\n  async setComponent(system, suggestionIdentifier, args: ISetComponentArguments): Promise<any> {\n    const route = { path: 'marketplace/features/components/{system}/{suggestionIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system, suggestionIdentifier }, args)\n    const requiredArguments = ['url']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all the status of the health checks of the systems components.\n   *\n   * request url: /kapi/v1/marketplace/features/status/{system}/{featureIdentifier}\n   * request method: GET\n   *\n   * @param system\n   * @param featureIdentifier\n   * @param {Object} args\n   * @param {String} args.from  (default: -1day)\n   * @param {String} args.time  (default: 1h)\n   */\n  async getHealthStatus(system, featureIdentifier, args: IGetHealthStatusArguments): Promise<any> {\n    const route = { path: 'marketplace/features/status/{system}/{featureIdentifier}', method: 'GET', version: 1 }\n    const argList = Object.assign({ system, featureIdentifier }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all features that can be activated for the given company and provider.\n   *\n   * request url: /kapi/v1/marketplace/marketplace/features/{providerIdentifier}/{company}\n   * request method: GET\n   *\n   * @param providerIdentifier\n   * @param company\n   * @param {Object} args\n   */\n  async getFeatures(providerIdentifier, company): Promise<any> {\n    const route = { path: 'marketplace/marketplace/features/{providerIdentifier}/{company}', method: 'GET', version: 1 }\n    const argList = Object.assign({ providerIdentifier, company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Activate the given feature for the given projects.\n   *\n   * request url: /kapi/v1/marketplace/marketplace/feature/activate/{company}/{featureIdentifier}\n   * request method: POST\n   *\n   * @param company\n   * @param featureIdentifier\n   * @param {Object} args\n   * @param {Array} args.projects \n   */\n  async activateFeature(company, featureIdentifier, args: IActivateFeatureArguments): Promise<any> {\n    const route = { path: 'marketplace/marketplace/feature/activate/{company}/{featureIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ company, featureIdentifier }, args)\n    const requiredArguments = ['projects']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Deactivate the given feature for the given projects.\n   *\n   * request url: /kapi/v1/marketplace/marketplace/feature/deactivate/{company}/{featureIdentifier}\n   * request method: POST\n   *\n   * @param company\n   * @param featureIdentifier\n   * @param {Object} args\n   * @param {Array} args.projects \n   */\n  async deactivateFeature(company, featureIdentifier, args: IDeactivateFeatureArguments): Promise<any> {\n    const route = { path: 'marketplace/marketplace/feature/deactivate/{company}/{featureIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ company, featureIdentifier }, args)\n    const requiredArguments = ['projects']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all features that are activated for the given project.\n   *\n   * request url: /kapi/v1/marketplace/marketplace/feature/active/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getActiveFeatures(project): Promise<any> {\n    const route = { path: 'marketplace/marketplace/feature/active/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all features that are activated for the given project.\n   *\n   * request url: /kapi/v1/marketplace/marketplace/feature/available/{project}\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {Number} args.status  (default: 400)\n   */\n  async getAvailableFeatures(project, args: IGetAvailableFeaturesArguments): Promise<any> {\n    const route = { path: 'marketplace/marketplace/feature/available/{project}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all features that exists.\n   * request url: /kapi/v1/marketplace/marketplace/feature/all\n   * request method: POST\n   *\n   * @param {Object} args\n   */\n  async getAllFeatures(): Promise<any> {\n    const route = { path: 'marketplace/marketplace/feature/all', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of features that where marked as favourites.\n   * request url: /kapi/v1/marketplace/marketplace/favourites\n   * request method: GET\n   *\n   * @param {Object} args\n   */\n  async getFavourites(): Promise<any> {\n    const route = { path: 'marketplace/marketplace/favourites', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Show the booking logs for the company.\n   *\n   * request url: /kapi/v1/marketplace/log/company/{company}\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getBookingLog(company): Promise<any> {\n    const route = { path: 'marketplace/log/company/{company}', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all the status of the health checks of the systems components.\n   *\n   * request url: /kapi/v1/marketplace/plugins/incidents/system/{system}\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getSystemPluginStatus(system): Promise<any> {\n    const route = { path: 'marketplace/plugins/incidents/system/{system}', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all the status of the health checks of the systems components.\n   *\n   * request url: /kapi/v1/marketplace/plugins/incidents/user/{user}\n   * request method: GET\n   *\n   * @param user\n   * @param {Object} args\n   */\n  async getUserPluginStatus(user): Promise<any> {\n    const route = { path: 'marketplace/plugins/incidents/user/{user}', method: 'GET', version: 1 }\n    const argList = Object.assign({ user }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Proxy a REST request \n   *\n   * request url: /kapi/v1/marketplace/proxy/{secret}/{url}\n   * request method: GET\n   *\n   * @param secret\n   * @param url\n   * @param {Object} args\n   */\n  async restProxy(secret, url): Promise<any> {\n    const route = { path: 'marketplace/proxy/{secret}/{url}', method: 'GET', version: 1 }\n    const argList = Object.assign({ secret, url }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default MarketplaceRepository\n", "import Repository from '../Repository'\n\n\nexport interface ISetCompanyCreditCardPlansArguments {\n  quantity: number\n  system_size?: number\n}\n\nexport interface ISetCompanyFreePlansArguments {\n  quantity: number\n  system_size: number\n}\n\nexport interface ISetCompanyFreePlansByUserArguments {\n  quantity: number\n  system_size?: number\n  identifier?: string\n}\n\nexport interface ISetCreditCardArguments {\n  stripe_cc_source: any\n  last_digits: string\n  brand: string\n}\n\nexport interface ISetBillingAddressArguments {\n  company_name: string\n  country: string\n  postal_code: string\n  city: string\n  street: string\n  usident?: string\n  email?: string\n}\n\nexport interface ISetSubscriptionPlanArguments {\n  identifier: string\n}\n\nexport interface ICreateCheckoutSessionArguments {\n  price_id: string\n  success_url: string\n  cancel_url: string\n  two_factor_code?: string\n}\n\nexport interface ICreateCustomerPortalSessionArguments {\n  return_url: string\n}\n\nexport interface IUpdateSubscriptionByProjectArguments {\n  price_id: string\n  success_url: string\n  cancel_url: string\n  two_factor_code?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2024-04-03\n */\nclass SubscriptionRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Get the companies subscription information.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getCompanySubscription(company): Promise<any> {\n    const route = { path: 'subscription/company/{company}/', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set the companies credit card plans.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/plans/creditcard\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {Number} args.quantity The number of packets to be used\n   * @param {Number} args.system_size The system size id (optional)\n   */\n  async setCompanyCreditCardPlans(company, args: ISetCompanyCreditCardPlansArguments): Promise<any> {\n    const route = { path: 'subscription/company/{company}/plans/creditcard', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['quantity']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set the companies free plans.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/plans/free\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {Number} args.quantity The number of packets to be used\n   * @param {Number} args.system_size The system size id\n   */\n  async setCompanyFreePlans(company, args: ISetCompanyFreePlansArguments): Promise<any> {\n    const route = { path: 'subscription/company/{company}/plans/free', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['quantity', 'system_size']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set the companies free plans by user.\n   *\n   * request url: /kapi/v1/subscription/user/{user}/plans/free\n   * request method: POST\n   *\n   * @param user\n   * @param {Object} args\n   * @param {Number} args.quantity The number of packets to be used\n   * @param {Number} args.system_size The system size id (optional)\n   * @param {String} args.identifier  (optional)\n   */\n  async setCompanyFreePlansByUser(user, args: ISetCompanyFreePlansByUserArguments): Promise<any> {\n    const route = { path: 'subscription/user/{user}/plans/free', method: 'POST', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['quantity']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set the companies credit card.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/creditcard\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {*} args.stripe_cc_source The stripe credit card id\n   * @param {String} args.last_digits The last 4 digits of the credit card\n   * @param {String} args.brand The credit cards brand\n   */\n  async setCreditCard(company, args: ISetCreditCardArguments): Promise<any> {\n    const route = { path: 'subscription/company/{company}/creditcard', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['stripe_cc_source', 'last_digits', 'brand']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set the billing address information for the given company.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/billingaddress\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {String} args.company_name The companies name.\n   * @param {String} args.country The companies billing address country.\n   * @param {String} args.postal_code The companies billing address postal code.\n   * @param {String} args.city The companies billing address city.\n   * @param {String} args.street The companies billing address street.\n   * @param {String} args.usident The companies \"Umsatzsteuer-Identifikationsnummer\". (optional)\n   * @param {String} args.email The email address the invoice information gets send to. (optional)\n   */\n  async setBillingAddress(company, args: ISetBillingAddressArguments): Promise<any> {\n    const route = { path: 'subscription/company/{company}/billingaddress', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['company_name', 'country', 'postal_code', 'city', 'street']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get the billing address information for the given company.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/billingaddress\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getBillingAddress(company): Promise<any> {\n    const route = { path: 'subscription/company/{company}/billingaddress', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get a list of features that are active.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/features\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getSubscribedFeatures(company): Promise<any> {\n    const route = { path: 'subscription/company/{company}/features', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get a list invoices for the given company.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/invoices\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getCompanyInvoices(company): Promise<any> {\n    const route = { path: 'subscription/company/{company}/invoices', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set the subscription plan of the given user.\n   *\n   * request url: /kapi/v1/subscription/user/{user}/plan\n   * request method: POST\n   *\n   * @param user\n   * @param {Object} args\n   * @param {String} args.identifier \n   */\n  async setSubscriptionPlan(user, args: ISetSubscriptionPlanArguments): Promise<any> {\n    const route = { path: 'subscription/user/{user}/plan', method: 'POST', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['identifier']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get current quota for the company.\n   *\n   * request url: /kapi/v1/subscription/company/{company}/quota\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getQuota(company): Promise<any> {\n    const route = { path: 'subscription/company/{company}/quota', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get a list of subscription products.\n   * request url: /kapi/v1/subscription/products\n   * request method: GET\n   *\n   * @param {Object} args\n   */\n  async getSubscriptionProducts(): Promise<any> {\n    const route = { path: 'subscription/products', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a checkout session for current user.\n   *\n   * request url: /kapi/v1/subscription/checkout/session\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.price_id The product price id\n   * @param {String} args.success_url \n   * @param {String} args.cancel_url \n   * @param {String} args.two_factor_code  (optional)\n   */\n  async createCheckoutSession(args: ICreateCheckoutSessionArguments): Promise<any> {\n    const route = { path: 'subscription/checkout/session', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['price_id', 'success_url', 'cancel_url']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a customer portal session for current user.\n   *\n   * request url: /kapi/v1/subscription/portal/session\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.return_url \n   */\n  async createCustomerPortalSession(args: ICreateCustomerPortalSessionArguments): Promise<any> {\n    const route = { path: 'subscription/portal/session', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['return_url']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Cancel a subscription.\n   *\n   * request url: /kapi/v1/subscription/external/{subscriptionId}\n   * request method: DELETE\n   *\n   * @param subscriptionId\n   * @param {Object} args\n   */\n  async cancelSubscription(subscriptionId): Promise<any> {\n    const route = { path: 'subscription/external/{subscriptionId}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ subscriptionId }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get a list of subscriptions for current user.\n   * request url: /kapi/v1/subscription\n   * request method: GET\n   *\n   * @param {Object} args\n   */\n  async getUserSubscriptions(): Promise<any> {\n    const route = { path: 'subscription', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update subscription by project.\n   *\n   * request url: /kapi/v1/subscription/project/{project}\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.price_id The product price id\n   * @param {String} args.success_url \n   * @param {String} args.cancel_url \n   * @param {String} args.two_factor_code  (optional)\n   */\n  async updateSubscriptionByProject(project, args: IUpdateSubscriptionByProjectArguments): Promise<any> {\n    const route = { path: 'subscription/project/{project}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['price_id', 'success_url', 'cancel_url']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * End all trials.\n   *\n   * request url: /kapi/v1/subscription/trial/{providerIdentifier}/end\n   * request method: POST\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   */\n  async endTrials(providerIdentifier): Promise<any> {\n    const route = { path: 'subscription/trial/{providerIdentifier}/end', method: 'POST', version: 1 }\n    const argList = Object.assign({ providerIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default SubscriptionRepository\n", "import Repository from '../Repository'\n\nexport interface ISetCheckStatusResult{\n  url_check_status? : boolean\n}\n\n\nexport interface IRunCrawlArguments {\n  user: number\n  checklist_name?: string\n  collections?: any[]\n  name: string\n  system: number\n  depth?: number\n  path?: string\n  parallel_requests?: number\n}\n\nexport interface IRunCompanyCrawlArguments {\n  user: number\n  checklist_name?: string\n  collections?: any[]\n  name: string\n  depth?: number\n  path: string\n  parallel_requests?: number\n}\n\nexport interface IListCrawlsArguments {\n  checklist_name?: string\n  system: number\n}\n\nexport interface IListCompanyCrawlsArguments {\n  pagination_start?: number\n  pagination_size?: number\n  include_collections?: boolean\n  crawl_schedule?: number\n}\n\nexport interface ISetCheckStatusArguments {\n  check_type: 'BrokenLink' | 'DeadLink' | 'JsErrorScanner' | 'JsErrorScanner_external' | 'SiteInfoBigFile' | 'SiteInfoFileSize'\n  check_status: 'false_positive'\n  url: string\n}\n\nexport interface ICreateCrawlScheduleArguments {\n  path: string\n  depth?: number\n  parallel_requests?: number\n  interval: 'daily' | 'weekly' | 'monthly'\n  timeslot: 'night' | 'morning' | 'noon' | 'afternoon'\n  day_of_month_or_week?: number\n  collections: any[]\n  timezone: string\n}\n\nexport interface IUpdateCrawlScheduleArguments {\n  path?: string\n  depth?: number\n  parallel_requests?: number\n  interval?: 'daily' | 'weekly' | 'monthly'\n  timeslot?: 'night' | 'morning' | 'noon' | 'afternoon'\n  day_of_month_or_week?: number\n  collections?: any[]\n  enabled?: boolean\n  timezone?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-06-28\n */\nclass CrawlerRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Get all possible crawler settings. This is only needed for usability in the frontends.\n   *\n   * request url: /kapi/v1/crawler/crawl/company/{company}}/settings\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getCrawlerSettings(company): Promise<any> {\n    const route = { path: 'crawler/crawl/company/{company}/settings', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Run a crawl for a given checklist\n   *\n   * request url: /kapi/v1/crawler/crawl/{project}\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {Number} args.user The user (id) that starts the crawl and gets informed when the crawl\n   *                            finishes\n   * @param {String} args.checklist_name The check lists name (optional)\n   * @param {Array} args.collections The additional collections (optional)\n   * @param {String} args.name The crawls name\n   * @param {Number} args.system The systems id\n   * @param {Number} args.depth Number of URLs to be crawled (default: 5)\n   * @param {String} args.path The URL the crawler starts to crawl (default: /)\n   * @param {Number} args.parallel_requests Number of parallel requests that can be done (default: 8)\n   */\n  async runCrawl(project, args: IRunCrawlArguments): Promise<any> {\n    const route = { path: 'crawler/crawl/{project}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['user', 'name', 'system']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Run a crawl for a given checklist\n   *\n   * request url: /kapi/v1/crawler/crawl/company/{company}\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {Number} args.user The user (id) that starts the crawl and gets informed when the crawl\n   *                            finishes\n   * @param {String} args.checklist_name The check lists name (optional)\n   * @param {Array} args.collections The additional collections (optional)\n   * @param {String} args.name The crawls name\n   * @param {Number} args.depth Number of URLs to be crawled (default: 50)\n   * @param {String} args.path The URL the crawler starts to crawl\n   * @param {Number} args.parallel_requests Number of parallel requests that can be done (default: 8)\n   */\n  async runCompanyCrawl(company, args: IRunCompanyCrawlArguments): Promise<any> {\n    const route = { path: 'crawler/crawl/company/{company}', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['user', 'name', 'path']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all crawl by the given parameters\n   *\n   * request url: /kapi/v1/crawler/crawl/{project}/crawls\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.checklist_name The check lists name (optional)\n   * @param {Number} args.system The systems id\n   */\n  async listCrawls(project, args: IListCrawlsArguments): Promise<any> {\n    const route = { path: 'crawler/crawl/{project}/crawls', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['system']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all crawl of the given company\n   *\n   * request url: /kapi/v1/crawler/crawl/company/{company}/crawls\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {Number} args.pagination_start  (optional)\n   * @param {Number} args.pagination_size  (default: 25)\n   * @param {Boolean} args.include_collections  (default: false)\n   * @param {Number} args.crawl_schedule Only show results for given crawl schedule (optional)\n   */\n  async listCompanyCrawls(company, args: IListCompanyCrawlsArguments): Promise<any> {\n    const route = { path: 'crawler/crawl/company/{company}/crawls', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Abort a running crawl. The effect can take up to 5 minutes.\n   *\n   * request url: /kapi/v1/crawler/crawl/{project}/{crawl}\n   * request method: PUT\n   *\n   * @param project\n   * @param crawl\n   * @param {Object} args\n   */\n  async abortCrawl(project, crawl): Promise<any> {\n    const route = { path: 'crawler/crawl/{project}/{crawl}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ project, crawl }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the detailed information for a given crawl with all results.\n   *\n   * request url: /kapi/v1/crawler/crawl/detail/{crawl}\n   * request method: POST\n   *\n   * @param crawl\n   * @param {Object} args\n   */\n  async getCrawl(crawl): Promise<any> {\n    const route = { path: 'crawler/crawl/detail/{crawl}', method: 'POST', version: 1 }\n    const argList = Object.assign({ crawl }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the detailed information for a given crawl with all results (as CSV).\n   *\n   * request url: /kapi/v1/crawler/crawl/detail/csv/{crawl}/{downloadSecret}\n   * request method: GET\n   *\n   * @param crawl\n   * @param downloadSecret\n   * @param {Object} args\n   */\n  async getCrawlCsv(crawl, downloadSecret): Promise<any> {\n    const route = { path: 'crawler/crawl/detail/csv/{crawl}/{downloadSecret}', method: 'GET', version: 1 }\n    const argList = Object.assign({ crawl, downloadSecret }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the crawler status for a given project.\n   *\n   * request url: /kapi/v1/crawler/status/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getCrawlerStatus(project): Promise<any> {\n    const route = { path: 'crawler/status/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the crawler status for a given company.\n   *\n   * request url: /kapi/v1/crawler/status/company/{company}\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getCompanyCrawlerStatus(company): Promise<any> {\n    const route = { path: 'crawler/status/company/{company}', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get all collections that can be crawled.\n   * request url: /kapi/v1/crawler/collections\n   * request method: POST\n   *\n   * @param {Object} args\n   */\n  async getCrawlableCollections(): Promise<any> {\n    const route = { path: 'crawler/collections', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set check status for a single url\n   *\n   * request url: /kapi/v1/crawler/company/{company}/check/status\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {*} args.check_type The check type (DeadLink)\n   * @param {*} args.check_status The status that should be set\n   * @param {String} args.url The url that status is valid for\n   *\n   * @return ISetCheckStatusResult\n   */\n  async setCheckStatus(company, args: ISetCheckStatusArguments): Promise<ISetCheckStatusResult> {\n    const route = { path: 'crawler/company/{company}/check/status', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['check_type', 'check_status', 'url']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Delete check status by id\n   *\n   * request url: /kapi/v1/crawler/company/{company}/check/status/{crawlUrlStatus}\n   * request method: DELETE\n   *\n   * @param company\n   * @param crawlUrlStatus\n   * @param {Object} args\n   */\n  async deleteCheckStatus(company, crawlUrlStatus): Promise<any> {\n    const route = { path: 'crawler/company/{company}/check/status/{crawlUrlStatus}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ company, crawlUrlStatus }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * List check status by company\n   *\n   * request url: /kapi/v1/crawler/company/{company}/check/status\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async listCheckStatus(company): Promise<any> {\n    const route = { path: 'crawler/company/{company}/check/status', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * List scheduled crawls by company\n   *\n   * request url: /kapi/v1/crawler/company/{company}/schedules\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async listCrawlSchedules(company): Promise<any> {\n    const route = { path: 'crawler/company/{company}/schedules', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Show scheduled crawl by id\n   *\n   * request url: /kapi/v1/crawler/company/{company}/schedules/{crawlSchedule}\n   * request method: GET\n   *\n   * @param company\n   * @param crawlSchedule\n   * @param {Object} args\n   */\n  async showCrawlSchedule(company, crawlSchedule): Promise<any> {\n    const route = { path: 'crawler/company/{company}/schedules/{crawlSchedule}', method: 'GET', version: 1 }\n    const argList = Object.assign({ company, crawlSchedule }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a crawl schedule\n   *\n   * request url: /kapi/v1/crawler/company/{company}/schedules\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {String} args.path The URL the crawler starts to crawl\n   * @param {Number} args.depth Number of URLs to be crawled (default: 50)\n   * @param {Number} args.parallel_requests Number of parallel requests that can be done (default: 8)\n   * @param {*} args.interval Interval at which a crawl is started\n   * @param {*} args.timeslot Time window in which a crawl is started\n   * @param {Number} args.day_of_month_or_week Day of month or week on which a crawl is started if\n   *                                            interval is weekly or monthly (optional)\n   * @param {Array} args.collections The additional collections\n   * @param {String} args.timezone The time zone for which the timeslot applies\n   */\n  async createCrawlSchedule(company, args: ICreateCrawlScheduleArguments): Promise<any> {\n    const route = { path: 'crawler/company/{company}/schedules', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['path', 'interval', 'timeslot', 'collections', 'timezone']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update a crawl schedule by id\n   *\n   * request url: /kapi/v1/crawler/company/{company}/schedules/{crawlSchedule}\n   * request method: PATCH\n   *\n   * @param company\n   * @param crawlSchedule\n   * @param {Object} args\n   * @param {String} args.path The URL the crawler starts to crawl (optional)\n   * @param {Number} args.depth Number of URLs to be crawled (default: 50)\n   * @param {Number} args.parallel_requests Number of parallel requests that can be done (default: 8)\n   * @param {*} args.interval Interval at which a crawl is started (optional)\n   * @param {*} args.timeslot Time window in which a crawl is started (optional)\n   * @param {Number} args.day_of_month_or_week Day of month or week on which a crawl is started if\n   *                                            interval is weekly or monthly (optional)\n   * @param {Array} args.collections The additional collections (optional)\n   * @param {Boolean} args.enabled Enable or disable the schedule (optional)\n   * @param {String} args.timezone The time zone for which the timeslot applies (optional)\n   */\n  async updateCrawlSchedule(company, crawlSchedule, args: IUpdateCrawlScheduleArguments): Promise<any> {\n    const route = { path: 'crawler/company/{company}/schedules/{crawlSchedule}', method: 'PATCH', version: 1 }\n    const argList = Object.assign({ company, crawlSchedule }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Delete crawl schedule by id\n   *\n   * request url: /kapi/v1/crawler/company/{company}/schedules/{crawlSchedule}\n   * request method: DELETE\n   *\n   * @param company\n   * @param crawlSchedule\n   * @param {Object} args\n   */\n  async deleteCrawlSchedule(company, crawlSchedule): Promise<any> {\n    const route = { path: 'crawler/company/{company}/schedules/{crawlSchedule}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ company, crawlSchedule }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Run a scheduled crawl immediately\n   *\n   * request url: /kapi/v1/crawler/company/{company}/schedules/{crawlSchedule}/crawl\n   * request method: POST\n   *\n   * @param company\n   * @param crawlSchedule\n   * @param {Object} args\n   */\n  async runScheduledCrawl(company, crawlSchedule): Promise<any> {\n    const route = { path: 'crawler/company/{company}/schedules/{crawlSchedule}/crawl', method: 'POST', version: 1 }\n    const argList = Object.assign({ company, crawlSchedule }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CrawlerRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateShopArguments {\n  name: string\n  base_url: string\n  owner: number\n  size?: 'large' | 'small'\n}\n\nexport interface IUpdateShopArguments {\n  name?: string\n  base_url?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CustomerHaendlerbundRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * H\u00E4ndlerbund only: the function is used to create a shop.\n   *\n   * request url: /kapi/v1/customers/haendlerbund/shops\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.name The shops name.\n   * @param {Url} args.base_url The shops base url with scheme, subdomain and domain.\n   * @param {Number} args.owner The shops owner (id).\n   * @param {*} args.size The shop size. It determines if the checks are done on a daily or hourly\n   *                          base. (default: large)\n   */\n  async createShop(args: ICreateShopArguments): Promise<any> {\n    const route = { path: 'customers/haendlerbund/shops', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['name', 'base_url', 'owner']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * H\u00E4ndlerbund only: the function is used to update a shop.\n   *\n   * request url: /kapi/v1/customers/haendlerbund/shops/{system}\n   * request method: PUT\n   *\n   * @param system\n   * @param {Object} args\n   * @param {String} args.name The shops name. (optional)\n   * @param {Url} args.base_url The shops base url with scheme, subdomain and domain. When changing the\n   *                            base url all shop pages will change their base as well. (optional)\n   */\n  async updateShop(system, args: IUpdateShopArguments): Promise<any> {\n    const route = { path: 'customers/haendlerbund/shops/{system}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ system }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CustomerHaendlerbundRepository\n", "import Repository from '../Repository'\n\n\nexport interface IFindBySystemArguments {\n  tool?: any\n  tools?: any[]\n  metric_type?: 'value' | 'status'\n  filter_trailing_nulls?: boolean\n  min_value?: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CustomerHaendlerbundMetricRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Search for the metrics for all eventIdentifiers in the given projects that are defined by the given\n   * tool.\n   *\n   * request url: /kapi/v1/customers/haendlerbund/metrics/{system}\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   * @param {*} args.tool A single tool id or the identifier of a tool. (optional)\n   * @param {Array} args.tools A list of tool ids. For every tool there will be a metric array returned. (optional)\n   * @param {*} args.metric_type The engine stores to kinds of metrics. Status and Value. The status\n   *                                 is the ratio between successful checks and failed in percent, the\n   *                                 value is the average value of the checks result. (default: value)\n   * @param {Boolean} args.filter_trailing_nulls Remove null values from the metric if they are at the\n   *                                             beginning. Trailing nulls are used of the metric does\n   *                                             not provide values for a given time spam. (default: true)\n   * @param {Number} args.min_value Replace all values that are smaller than the min value with the min\n   *                                 value. (default: 0)\n   */\n  async findBySystem(system, args: IFindBySystemArguments): Promise<any> {\n    const route = { path: 'customers/haendlerbund/metrics/{system}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CustomerHaendlerbundMetricRepository\n", "import Repository from '../Repository'\n\n\nexport interface IRunMwstCrawlArguments {\n  email_address: string\n  start_url: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CustomerMehrwertsteuercheckRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Mehrwertsteuer Check only: Start a new crawl for the given start page. Max. 100 urls are crawled\n   * with 4 parallel requests.\n   *\n   * request url: /kapi/v1/customers/mehrwertsteuer/crawl\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.email_address The email address the crawl result is send to.\n   * @param {Url} args.start_url The url the crawler should start with.\n   */\n  async runMwstCrawl(args: IRunMwstCrawlArguments): Promise<any> {\n    const route = { path: 'customers/mehrwertsteuer/crawl', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['email_address', 'start_url']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Mehrwertsteuer Check only: get the status and check result of the crawl with the given unique\n   * identifier\n   *\n   * request url: /kapi/v1/customers/mehrwertsteuer/crawl/{crawlIdentifier}\n   * request method: GET\n   *\n   * @param crawlIdentifier\n   * @param {Object} args\n   */\n  async showCrawlResult(crawlIdentifier): Promise<any> {\n    const route = { path: 'customers/mehrwertsteuer/crawl/{crawlIdentifier}', method: 'GET', version: 1 }\n    const argList = Object.assign({ crawlIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CustomerMehrwertsteuercheckRepository\n", "import Repository from '../Repository'\n\n\nexport interface ISetArguments {\n  key: string\n  value: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-24\n */\nclass MemoryRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'MasterConnection'\n    }\n\n  /**\n   * Write something to the memory\n   *\n   * request url: /{application}/memory/{objectType}/{objectId}\n   * request method: PUT\n   *\n   * @param application\n   * @param objectType\n   * @param objectId\n   * @param {Object} args\n   * @param {String} args.key \n   * @param {String} args.value \n   */\n  async set(application, objectType, objectId, args: ISetArguments): Promise<any> {\n    const route = { path: '/{application}/memory/{objectType}/{objectId}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ application, objectType, objectId }, args)\n    const requiredArguments = ['key', 'value']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default MemoryRepository\n", "import Repository from '../Repository'\n\n\nexport interface IGetScoresByUserArguments {\n  scores: any[]\n  with_sub_scores?: boolean\n  filter_empty_projects?: boolean\n}\n\nexport interface IGetScoresArguments {\n  scores: any[]\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass ScoreRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return a list of scores by the given score names for all projects and systems the user is part of.\n   *\n   * request url: /kapi/v1/score/scores/user/{user}\n   * request method: POST\n   *\n   * @param user\n   * @param {Object} args\n   * @param {Array} args.scores List of score names\n   * @param {Boolean} args.with_sub_scores NOT IMPLEMENTED YET: If true detailed information about the\n   *                                       score will be provided. (default: false)\n   * @param {Boolean} args.filter_empty_projects If true the only projects with systems are returned (default: false)\n   */\n  async getScoresByUser(user, args: IGetScoresByUserArguments): Promise<any> {\n    const route = { path: 'score/scores/user/{user}', method: 'POST', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['scores']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the score for a given score name.\n   *\n   * request url: /kapi/v1/score/scores/{system}/{scoreName}\n   * request method: POST\n   *\n   * @param system\n   * @param scoreName\n   * @param {Object} args\n   */\n  async getScore(system, scoreName): Promise<any> {\n    const route = { path: 'score/scores/{system}/{scoreName}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system, scoreName }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of scores by the given score names.\n   *\n   * request url: /kapi/v1/score/scores/{system}\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   * @param {Array} args.scores list of score names\n   */\n  async getScores(system, args: IGetScoresArguments): Promise<any> {\n    const route = { path: 'score/scores/{system}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, args)\n    const requiredArguments = ['scores']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ScoreRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateArguments {\n  name: string\n  interval?: 'immediately' | '7d' | '24h' | '1h'\n  severities?: any[]\n  channels?: number\n}\n\nexport interface IUpdateArguments {\n  name?: string\n  interval?: 'immediately' | '7d' | '24h' | '1h'\n  severities?: any[]\n  channels?: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass AlertingPolicyRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * List all policies for the given project\n   *\n   * request url: /kapi/v1/alerting/policies/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async list(project): Promise<any> {\n    const route = { path: 'alerting/policies/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * request url: /kapi/v1/alerting/policies/{project}\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.name \n   * @param {String} args.interval  (default: immediately)\n   * @param {Array} args.severities  (optional)\n   * @param {Number} args.channels  (optional)\n   */\n  async create(project, args: ICreateArguments): Promise<any> {\n    const route = { path: 'alerting/policies/{project}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['name']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Delete the given policy\n   *\n   * request url: /kapi/v1/alerting/policies/{project}/{policy}\n   * request method: DELETE\n   *\n   * @param project\n   * @param policy\n   * @param {Object} args\n   */\n  async delete(project, policy): Promise<any> {\n    const route = { path: 'alerting/policies/{project}/{policy}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ project, policy }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * request url: /kapi/v1/alerting/policies/{project}/{policy}\n   * request method: PUT\n   *\n   * @param project\n   * @param policy\n   * @param {Object} args\n   * @param {String} args.name  (optional)\n   * @param {String} args.interval  (optional)\n   * @param {Array} args.severities  (optional)\n   * @param {Number} args.channels  (optional)\n   */\n  async update(project, policy, args: IUpdateArguments): Promise<any> {\n    const route = { path: 'alerting/policies/{project}/{policy}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ project, policy }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default AlertingPolicyRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateArguments {\n  name: string\n  type: 'email' | 'slack' | 'teams'\n  options: any[]\n  language?: string\n}\n\nexport interface IUpdateArguments {\n  name?: string\n  type: 'email' | 'slack' | 'teams'\n  options?: any[]\n  language?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass AlertingChannelRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * List all channels for the given project.\n   *\n   * request url: /kapi/v1/alerting/channels/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async list(project): Promise<any> {\n    const route = { path: 'alerting/channels/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a new notification channel. At the moment only e-mail is provided.\n   *\n   * request url: /kapi/v1/alerting/channels/{project}\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.name The name of the alert channel\n   * @param {*} args.type \n   * @param {Array} args.options \n   * @param {String} args.language The language the alert should be send in. If not value is set the\n   *                               default provider language is taken. (optional)\n   */\n  async create(project, args: ICreateArguments): Promise<any> {\n    const route = { path: 'alerting/channels/{project}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['name', 'type', 'options']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Delete the given channel.\n   *\n   * request url: /kapi/v1/alerting/channels/{project}/{channel}\n   * request method: DELETE\n   *\n   * @param project\n   * @param channel\n   * @param {Object} args\n   */\n  async delete(project, channel): Promise<any> {\n    const route = { path: 'alerting/channels/{project}/{channel}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ project, channel }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update an existing notification channel.\n   *\n   * request url: /kapi/v1/alerting/channels/{project}/{channel}\n   * request method: PUT\n   *\n   * @param project\n   * @param channel\n   * @param {Object} args\n   * @param {String} args.name  (optional)\n   * @param {*} args.type \n   * @param {Array} args.options  (optional)\n   * @param {String} args.language The language the alert should be send in (optional)\n   */\n  async update(project, channel, args: IUpdateArguments): Promise<any> {\n    const route = { path: 'alerting/channels/{project}/{channel}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ project, channel }, args)\n    const requiredArguments = ['type']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default AlertingChannelRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass WebsocketRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return a websocket server with the room names for the given user.\n   * request url: /kapi/v1/websockets/rooms\n   * request method: POST\n   *\n   * @param {Object} args\n   */\n  async getRooms(): Promise<any> {\n    const route = { path: 'websockets/rooms', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all websocket server with the room names.\n   * request url: /kapi/v1/websockets/rooms/all\n   * request method: POST\n   *\n   * @param {Object} args\n   */\n  async getAllRooms(): Promise<any> {\n    const route = { path: 'websockets/rooms/all', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default WebsocketRepository\n", "import Repository from '../Repository'\n\n\nexport interface IFindBySystemArguments {\n  tool?: any\n  tools?: any[]\n  metric_type?: 'value' | 'status'\n  filter_trailing_nulls?: boolean\n  min_value?: number\n  time?: string\n  from?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2023-09-18\n */\nclass MetricRepository extends Repository {\n\n  constructor() {\n    super()\n    this.connectionType = 'ClusterConnection'\n  }\n\n  /**\n   * Search for the metrics for all eventIdentifiers in the given projects that are defined by the given\n   * tool.\n   *\n   * request url: /kapi/v1/metric/eventidentifier/{system}/search\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   * @param {*} args.tool A single tool id or the identifier of a tool. (optional)\n   * @param {Array} args.tools A list of tool ids. For every tool there will be a metric array returned. (optional)\n   * @param {*} args.metric_type The engine stores to kinds of metrics. Status and Value. The status\n   *                                 is the ratio between successful checks and failed in percent, the\n   *                                 value is the average value of the checks result. (default: value)\n   * @param {Boolean} args.filter_trailing_nulls Remove null values from the metric if they are at the\n   *                                             beginning. Trailing nulls are used of the metric does\n   *                                             not provide values for a given time spam. (default: true)\n   * @param {Number} args.min_value Replace all values that are smaller than the min value with the min\n   *                                 value. (default: 0)\n   * @param {String} args.time The time group the datapoint are aggregated. (default: 24h)\n   * @param {String} args.from The interval you want to get the data from. (default: -1month)\n   */\n  async findBySystem(system, args: IFindBySystemArguments): Promise<any> {\n    const route = { path: 'metric/eventidentifier/{system}/search', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default MetricRepository\n", "import Repository from '../Repository'\n\nexport interface ICreateTokenByCredentialsResult{\n  user: { \n    company: { \n        subscription: { \n            trial_end? : number\n      }\n    }\n    preferred_language? : string\n  }\n}\n\n\nexport interface ICreateTokenByCredentialsArguments {\n  username: string\n  password: string\n  expire?: boolean\n  with_memories?: boolean\n}\n\nexport interface ICreateTokenByRefreshTokenArguments {\n  with_memories?: boolean\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass AuthRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/auth/tokens/access\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.username \n   * @param {String} args.password \n   * @param {Boolean} args.expire  (default: true)\n   * @param {Boolean} args.with_memories If true all Memory entities will be attached in the answer. (default: false)\n   *\n   * @return ICreateTokenByCredentialsResult\n   */\n  async createTokenByCredentials(args: ICreateTokenByCredentialsArguments): Promise<ICreateTokenByCredentialsResult> {\n    const route = { path: 'auth/tokens/access', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['username', 'password']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * request url: /kapi/v1/auth/tokens/refresh/{user}\n   * request method: POST\n   *\n   * @param user\n   * @param {Object} args\n   * @param {Boolean} args.with_memories If true all Memory entities will be attached in the answer. (default: false)\n   */\n  async createTokenByRefreshToken(user, args: ICreateTokenByRefreshTokenArguments): Promise<any> {\n    const route = { path: 'auth/tokens/refresh/{user}', method: 'POST', version: 1 }\n    const argList = Object.assign({ user }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default AuthRepository\n", "import Repository from '../Repository'\n\n\nexport interface IActivateArguments {\n  activation_key: string\n}\n\nexport interface ICreateArguments {\n  username?: string\n  master_id?: number\n  suppress_activation?: boolean\n  activate?: boolean\n  email: string\n  preferred_language?: string\n  company_id?: number\n  create_company?: boolean\n  full_name?: string\n  first_name?: string\n  last_name?: string\n  password: string\n  _attributes?: any[]\n}\n\nexport interface IUpdateUserArguments {\n  email?: string\n  preferred_language?: string\n  company_id?: number\n  first_name?: string\n  last_name?: string\n}\n\nexport interface ISetPreferredLanguageArguments {\n  language: string\n}\n\nexport interface IDeleteByEmailArguments {\n  email: string\n}\n\nexport interface IConnectOAuthAccountArguments {\n  provider: 'haendlerbund' | 'google'\n  provider_user_id: string\n}\n\nexport interface IExistsArguments {\n  query: any[]\n}\n\nexport interface IFindArguments {\n  query: any[]\n}\n\nexport interface IUpdateMasterIdArguments {\n  master_id: number\n}\n\nexport interface IChangePasswordArguments {\n  password_new: string\n}\n\nexport interface IRequestPasswordResetArguments {\n  email: string\n}\n\nexport interface IResetPasswordArguments {\n  password: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass ClusterUserRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Activate an user account. The endpoint will return a valid access and refresh token so the user can\n   * be logged in without re-entering username and password.\n   *\n   * request url: /kapi/v1/user/users/activate\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.activation_key \n   */\n  async activate(args: IActivateArguments): Promise<any> {\n    const route = { path: 'user/users/activate', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['activation_key']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint creates a new user. The given provider (url param) will be attached.\n   *\n   * request url: /kapi/v1/user/users/{provider}\n   * request method: POST\n   *\n   * @param provider\n   * @param {Object} args\n   * @param {String} args.username The new users name. (optional)\n   * @param {Number} args.master_id The users id on the master server. (default: -1)\n   * @param {Boolean} args.suppress_activation If true no activation mail will be send.. (default: false)\n   * @param {Boolean} args.activate If true no activation mail will be send.. (default: true)\n   * @param {String} args.email The email address of the new user.\n   * @param {String} args.preferred_language The users preferred interface language. (optional)\n   * @param {Number} args.company_id The companies numeric id of the new user. (optional)\n   * @param {Boolean} args.create_company Create a new company if none exists. (default: false)\n   * @param {String} args.full_name The users full name. (optional)\n   * @param {String} args.first_name The users first name. (optional)\n   * @param {String} args.last_name The users last name. (optional)\n   * @param {String} args.password \n   * @param {Array} args._attributes Additional attributes for the user (default: [])\n   */\n  async create(provider, args: ICreateArguments): Promise<any> {\n    const route = { path: 'user/users/{provider}', method: 'POST', version: 1 }\n    const argList = Object.assign({ provider }, args)\n    const requiredArguments = ['email', 'password']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint updates an existing user.\n   *\n   * request url: /kapi/v1/user/users/{user}\n   * request method: PUT\n   *\n   * @param user\n   * @param {Object} args\n   * @param {String} args.email The email address of the new user. (optional)\n   * @param {String} args.preferred_language The users preferred interface language. (optional)\n   * @param {Number} args.company_id The companies numeric id of the new user. (optional)\n   * @param {String} args.first_name The users first name. (optional)\n   * @param {String} args.last_name The users last name. (optional)\n   */\n  async updateUser(user, args: IUpdateUserArguments): Promise<any> {\n    const route = { path: 'user/users/{user}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ user }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update the users preferred language.\n   *\n   * request url: /kapi/v1/user/users/preferredLanguage/{user}\n   * request method: PUT\n   *\n   * @param user\n   * @param {Object} args\n   * @param {String} args.language The users preferred interface language.\n   */\n  async setPreferredLanguage(user, args: ISetPreferredLanguageArguments): Promise<any> {\n    const route = { path: 'user/users/preferredLanguage/{user}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['language']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Delete the given user and all owned projects.\n   *\n   * request url: /kapi/v1/user/users/{user}\n   * request method: DELETE\n   *\n   * @param user\n   * @param {Object} args\n   */\n  async delete(user): Promise<any> {\n    const route = { path: 'user/users/{user}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ user }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Checks if the user can be deleted.\n   *\n   * request url: /kapi/v1/user/users/deletable/{user}\n   * request method: POST\n   *\n   * @param user\n   * @param {Object} args\n   */\n  async isDeletable(user): Promise<any> {\n    const route = { path: 'user/users/deletable/{user}', method: 'POST', version: 1 }\n    const argList = Object.assign({ user }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   *  the given user (by email) and all owned projects.\n   *\n   * request url: /kapi/v1/user/users/delete/email\n   * request method: DELETE\n   *\n   * @param {Object} args\n   * @param {String} args.email The users email address\n   */\n  async deleteByEmail(args: IDeleteByEmailArguments): Promise<any> {\n    const route = { path: 'user/users/delete/email', method: 'DELETE', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['email']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint connects an OAuth provider with the current user.\n   *\n   * request url: /kapi/v1/user/oauth/{user}/connect\n   * request method: PUT\n   *\n   * @param user\n   * @param {Object} args\n   * @param {*} args.provider The OAuth provider.\n   * @param {String} args.provider_user_id The OAuth provider user id.\n   */\n  async connectOAuthAccount(user, args: IConnectOAuthAccountArguments): Promise<any> {\n    const route = { path: 'user/oauth/{user}/connect', method: 'PUT', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['provider', 'provider_user_id']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint returns true if a user exists that matches the given search criteria.\n   *\n   * request url: /kapi/v1/user/users/exists\n   * request method: GET\n   *\n   * @param {Object} args\n   * @param {Array} args.query The key value pairs for the search.\n   */\n  async exists(args: IExistsArguments): Promise<any> {\n    const route = { path: 'user/users/exists', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['query']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint returns a user that matches the given search criteria.\n   *\n   * request url: /kapi/v1/user/users/find\n   * request method: GET\n   *\n   * @param {Object} args\n   * @param {Array} args.query The key value pairs for the search.\n   */\n  async find(args: IFindArguments): Promise<any> {\n    const route = { path: 'user/users/find', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['query']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of all users for the given company.\n   *\n   * request url: /kapi/v1/user/users/find/all/{providerIdentifier}\n   * request method: POST\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   */\n  async findAll(providerIdentifier): Promise<any> {\n    const route = { path: 'user/users/find/all/{providerIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ providerIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint updates an existing users master id.\n   *\n   * request url: /kapi/v1/user/users/{user}/masterId\n   * request method: PUT\n   *\n   * @param user\n   * @param {Object} args\n   * @param {Number} args.master_id The users master id.\n   */\n  async updateMasterId(user, args: IUpdateMasterIdArguments): Promise<any> {\n    const route = { path: 'user/users/{user}/masterId', method: 'PUT', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['master_id']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Change the users password. This can only be done by the master server.\n   *\n   * request url: /kapi/v1/user/users/{user}/password\n   * request method: PUT\n   *\n   * @param user\n   * @param {Object} args\n   * @param {String} args.password_new \n   */\n  async changePassword(user, args: IChangePasswordArguments): Promise<any> {\n    const route = { path: 'user/users/{user}/password', method: 'PUT', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['password_new']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Request password change e-mail.\n   *\n   * request url: /kapi/v1/user/users/password/reset/request\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.email The users email address\n   */\n  async requestPasswordReset(args: IRequestPasswordResetArguments): Promise<any> {\n    const route = { path: 'user/users/password/reset/request', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['email']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Reset the password.\n   *\n   * request url: /kapi/v1/user/users/password/reset/{user}\n   * request method: PUT\n   *\n   * @param user\n   * @param {Object} args\n   * @param {String} args.password The new password\n   */\n  async resetPassword(user, args: IResetPasswordArguments): Promise<any> {\n    const route = { path: 'user/users/password/reset/{user}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['password']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ClusterUserRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateUserArguments {\n  email: string\n  password: string\n  company?: number\n  fullName?: any\n  firstName?: string\n  lastName?: string\n  suppressActivation?: boolean\n  handleDoubleRegistration?: boolean\n  activate?: boolean\n  threeSixtyId?: string\n  _attributes?: any[]\n}\n\nexport interface IUpdateUserArguments {\n  email?: string\n  preferred_language?: string\n  company_id?: number\n  first_name?: string\n  last_name?: string\n}\n\nexport interface ISetPreferredLanguageArguments {\n  language: string\n}\n\nexport interface IChangePasswordArguments {\n  password_old: string\n  password_new: string\n}\n\nexport interface IResetPasswordArguments {\n  password: string\n}\n\nexport interface IRequestPasswordResetArguments {\n  email: string\n}\n\nexport interface IActivateArguments {\n  activation_key: string\n}\n\nexport interface IFindArguments {\n  query: any[]\n}\n\nexport interface IConnectAuthAccountArguments {\n  provider: 'haendlerbund' | 'google' | '360'\n  providerUserId: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-24\n */\nclass UserRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'MasterConnection'\n    }\n\n  /**\n   * This endpoint creates a new user.\n   *\n   * request url: /{application}/user\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   * @param {String} args.email\n   * @param {String} args.password\n   * @param {Number} args.company  (optional)\n   * @param {*} args.fullName The users full name. (optional)\n   * @param {String} args.firstName The users first name. (optional)\n   * @param {String} args.lastName The users last name. (optional)\n   * @param {Boolean} args.suppressActivation If set to true no activation mail will be send. (default: false)\n   * @param {Boolean} args.handleDoubleRegistration If set to false no double registration mail will be\n   *                                                send. (default: true)\n   * @param {Boolean} args.activate Activate the user immediately. (default: false)\n   * @param {String} args.threeSixtyId If this user is a Plesk 360 user the 360 id is mandatory. (optional)\n   * @param {Array} args._attributes Additional attributes for the user (default: [])\n   */\n  async createUser(application, args: ICreateUserArguments): Promise<any> {\n    const route = { path: '/{application}/user', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, args)\n    const requiredArguments = ['email', 'password']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint deletes a user.\n   *\n   * request url: /{application}/user/{user}\n   * request method: DELETE\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   */\n  async deleteUser(application, user): Promise<any> {\n    const route = { path: '/{application}/user/{user}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ application, user }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint updates an existing user.\n   *\n   * request url: /{application}/user/{user}\n   * request method: PUT\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   * @param {String} args.email The email address of the new user. (optional)\n   * @param {String} args.preferred_language The users preferred interface language. (optional)\n   * @param {Number} args.company_id The companies numeric id of the new user. (optional)\n   * @param {String} args.first_name The users first name. (optional)\n   * @param {String} args.last_name The users last name. (optional)\n   */\n  async updateUser(application, user, args: IUpdateUserArguments): Promise<any> {\n    const route = { path: '/{application}/user/{user}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ application, user }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update the users preferred language.\n   *\n   * request url: /{application}/user/{user}/language\n   * request method: PUT\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   * @param {String} args.language The users preferred interface language.\n   */\n  async setPreferredLanguage(application, user, args: ISetPreferredLanguageArguments): Promise<any> {\n    const route = { path: '/{application}/user/{user}/language', method: 'PUT', version: 1 }\n    const argList = Object.assign({ application, user }, args)\n    const requiredArguments = ['language']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Change the users password.\n   *\n   * request url: /{application}/user/{user}/password\n   * request method: PUT\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   * @param {String} args.password_old\n   * @param {String} args.password_new\n   */\n  async changePassword(application, user, args: IChangePasswordArguments): Promise<any> {\n    const route = { path: '/{application}/user/{user}/password', method: 'PUT', version: 1 }\n    const argList = Object.assign({ application, user }, args)\n    const requiredArguments = ['password_old', 'password_new']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Checks if the user can be deleted.\n   *\n   * request url: /{application}/user/{user}/deletable/{company}\n   * request method: POST\n   *\n   * @param application\n   * @param user\n   * @param company\n   * @param {Object} args\n   */\n  async isDeletable(application, user, company): Promise<any> {\n    const route = { path: '/{application}/user/{user}/deletable/{company}', method: 'POST', version: 1 }\n    const argList = Object.assign({ application, user, company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Reset the password.\n   *\n   * request url: /{application}/user/{user}/password/reset\n   * request method: PUT\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   * @param {String} args.password The new password\n   */\n  async resetPassword(application, user, args: IResetPasswordArguments): Promise<any> {\n    const route = { path: '/{application}/user/{user}/password/reset', method: 'PUT', version: 1 }\n    const argList = Object.assign({ application, user }, args)\n    const requiredArguments = ['password']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList, true)\n  }\n\n  /**\n   * Request password change e-mail.\n   *\n   * request url: /{application}/user/password/request\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   * @param {String} args.email The users email address\n   */\n  async requestPasswordReset(application, args: IRequestPasswordResetArguments): Promise<any> {\n    const route = { path: '/{application}/user/password/request', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, args)\n    const requiredArguments = ['email']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList, true)\n  }\n\n  /**\n   * Activate an user account. The endpoint will return a valid access and refresh token so the user can\n   * be logged in without re-entering username and password.\n   *\n   * request url: /{application}/user/activate\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   * @param {String} args.activation_key\n   */\n  async activate(application, args: IActivateArguments): Promise<any> {\n    const route = { path: '/{application}/user/activate', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, args)\n    const requiredArguments = ['activation_key']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint returns a user that matches the given search criteria.\n   *\n   * request url: /{application}/user/find\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   * @param {Array} args.query The key value pairs for the search.\n   */\n  async find(application, args: IFindArguments): Promise<any> {\n    const route = { path: '/{application}/user/find', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, args)\n    const requiredArguments = ['query']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint connects an OAuth provider with the current user.\n   *\n   * request url: /{application}/user/{user}/connect\n   * request method: POST\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   * @param {*} args.provider The OAuth provider.\n   * @param {String} args.providerUserId The OAuth provider user id.\n   */\n  async connectAuthAccount(application, user, args: IConnectAuthAccountArguments): Promise<any> {\n    const route = { path: '/{application}/user/{user}/connect', method: 'POST', version: 1 }\n    const argList = Object.assign({ application, user }, args)\n    const requiredArguments = ['provider', 'providerUserId']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default UserRepository\n", "import Repository from '../Repository'\n\n\nexport interface IUpdateArguments {\n  system_count: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-06-13\n */\nclass UserSubscriptionRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Update the subscription for a given user.\n   *\n   * request url: /kapi/v1/user/subscriptions/{user}\n   * request method: PUT\n   *\n   * @param user\n   * @param {Object} args\n   * @param {Number} args.system_count The number of systems the user is allowed to create.\n   */\n  async update(user, args: IUpdateArguments): Promise<any> {\n    const route = { path: 'user/subscriptions/{user}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ user }, args)\n    const requiredArguments = ['system_count']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default UserSubscriptionRepository\n", "import Repository from '../Repository'\n\n\nexport interface IInviteArguments {\n  email: string\n  user_name?: string\n  user_role?: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass InvitationRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * This endpoint invites a new user to the project.\n   *\n   * request url: /kapi/v1/user/invitation/invite/{project}\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.email The invitations e-mail address\n   * @param {String} args.user_name The users company name. (default: )\n   * @param {Number} args.user_role The projects role of the newly added user. (default: 200)\n   */\n  async invite(project, args: IInviteArguments): Promise<any> {\n    const route = { path: 'user/invitation/invite/{project}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['email']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint aborts a given invitation.\n   *\n   * request url: /kapi/v1/user/invitation/abort/{invitation}\n   * request method: DELETE\n   *\n   * @param invitation\n   * @param {Object} args\n   */\n  async abort(invitation): Promise<any> {\n    const route = { path: 'user/invitation/abort/{invitation}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ invitation }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint returns a list of all open invitations for the given project.\n   *\n   * request url: /kapi/v1/user/invitation/open/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getOpenInvitations(project): Promise<any> {\n    const route = { path: 'user/invitation/open/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default InvitationRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateArguments {\n  name: string\n  master_id: number\n}\n\nexport interface IExistsArguments {\n  company_name: string\n}\n\nexport interface ISearchArguments {\n  company_name: string\n}\n\nexport interface IConnectUserArguments {\n  user_role?: number\n}\n\nexport interface IUpdateMasterIdArguments {\n  master_id: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass ClusterCompanyRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Create a new company\n   *\n   * request url: /kapi/v1/user/companies/{providerIdentifier}\n   * request method: POST\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   * @param {String} args.name The companies name\n   * @param {Number} args.master_id The master id from the auth2 server\n   */\n  async create(providerIdentifier, args: ICreateArguments): Promise<any> {\n    const route = { path: 'user/companies/{providerIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ providerIdentifier }, args)\n    const requiredArguments = ['name', 'master_id']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Check if the given company name already exists\n   *\n   * request url: /kapi/v1/user/companies/exists\n   * request method: GET\n   *\n   * @param {Object} args\n   * @param {String} args.company_name The companies name\n   */\n  async exists(args: IExistsArguments): Promise<any> {\n    const route = { path: 'user/companies/exists', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['company_name']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Search for a given company by provider and name\n   *\n   * request url: /kapi/v1/user/companies/search/{providerIdentifier}\n   * request method: POST\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   * @param {String} args.company_name The companies name\n   */\n  async search(providerIdentifier, args: ISearchArguments): Promise<any> {\n    const route = { path: 'user/companies/search/{providerIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ providerIdentifier }, args)\n    const requiredArguments = ['company_name']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of all companies for the given provider.\n   *\n   * request url: /kapi/v1/user/companies/findall/{providerIdentifier}\n   * request method: POST\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   */\n  async findAll(providerIdentifier): Promise<any> {\n    const route = { path: 'user/companies/findall/{providerIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ providerIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Connect a given user to a company\n   *\n   * request url: /kapi/v1/user/companies/connect/{company}/{user}\n   * request method: POST\n   *\n   * @param company\n   * @param user\n   * @param {Object} args\n   * @param {Number} args.user_role The users company role (default: 1000)\n   */\n  async connectUser(company, user, args: IConnectUserArguments): Promise<any> {\n    const route = { path: 'user/companies/connect/{company}/{user}', method: 'POST', version: 1 }\n    const argList = Object.assign({ company, user }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint updates an existing companies master id.\n   *\n   * request url: /kapi/v1/user/companies/{company}/masterId\n   * request method: PUT\n   *\n   * @param company\n   * @param {Object} args\n   * @param {Number} args.master_id The users master id.\n   */\n  async updateMasterId(company, args: IUpdateMasterIdArguments): Promise<any> {\n    const route = { path: 'user/companies/{company}/masterId', method: 'PUT', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['master_id']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ClusterCompanyRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateComponentArguments {\n  system: number\n  enableToolsBySystem?: boolean\n}\n\nexport interface ICreateComponentsArguments {\n  system: number\n  enableToolsBySystem?: boolean\n  updateIfComponentSuggestionExists?: boolean\n  components: any[]\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass ComponentRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Show all existing component types.\n   *\n   * request url: /kapi/v1/project/components/componenttypes/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async showComponentTypes(project): Promise<any> {\n    const route = { path: 'project/components/componenttypes/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get all information about the given component.\n   *\n   * request url: /kapi/v1/project/components/{component}\n   * request method: GET\n   *\n   * @param component\n   * @param {Object} args\n   */\n  async showComponents(component): Promise<any> {\n    const route = { path: 'project/components/{component}', method: 'GET', version: 1 }\n    const argList = Object.assign({ component }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a new component.\n   *\n   * request url: /kapi/v1/project/components\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {Number} args.system\n   * @param {Boolean} args.enableToolsBySystem  (default: true)\n   */\n  async createComponent(args: ICreateComponentArguments): Promise<any> {\n    const route = { path: 'project/components', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['system']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a set of new components for a given system.\n   *\n   * request url: /kapi/v1/project/components/many\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {Number} args.system The system the components are part of,\n   * @param {Boolean} args.enableToolsBySystem If true all checks from the parent system are inherited. (default: true)\n   * @param {Boolean} args.updateIfComponentSuggestionExists If true and a component with the same\n   *                                                         suggestion id already exists it will be\n   *                                                         updated. (default: false)\n   * @param {Array} args.components List of components that should be created/updated.\n   */\n  async createComponents(args: ICreateComponentsArguments): Promise<any> {\n    const route = { path: 'project/components/many', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['system', 'components']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update the given component.\n   *\n   * request url: /kapi/v1/project/components/{component}\n   * request method: PUT\n   *\n   * @param component\n   * @param {Object} args\n   */\n  async updateComponent(component, args): Promise<any> {\n    const route = { path: 'project/components/{component}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ component }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Mark the given component as deleted.\n   *\n   * request url: /kapi/v1/project/components/{component}\n   * request method: DELETE\n   *\n   * @param component\n   * @param {Object} args\n   */\n  async deleteComponent(component): Promise<any> {\n    const route = { path: 'project/components/{component}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ component }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ComponentRepository\n", "import Repository from '../Repository'\n\n\nexport interface ISearchArguments {\n  user: number\n  with_next_full_run?: boolean\n  with_onboarding_status?: boolean\n  with_features?: boolean\n  owned_by_user?: boolean\n  filter_empty_projects?: boolean\n}\n\nexport interface IDeleteArguments {\n  cancel_subscription?: boolean\n}\n\nexport interface IUpdateArguments {\n  name: string\n  location?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2024-03-25\n */\nclass ProjectRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * This endpoint will return a detailed onboarding status.\n   *\n   * request url: /kapi/v1/project/{project}/onboarding/status\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getStatus(project): Promise<any> {\n    const route = { path: 'project/{project}/onboarding/status', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all projects and the user roles for a given user.\n   *\n   * request url: /kapi/v1/project/projects/search\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {Number} args.user The users id\n   * @param {Boolean} args.with_next_full_run If true the next approximated hourly run will be returned;\n   *                                          the value is the time in seconds till the next run (default: false)\n   * @param {Boolean} args.with_onboarding_status If true the projects onboarding status is added to the\n   *                                              response. (default: false)\n   * @param {Boolean} args.with_features If true the projects marketplace features are added to the\n   *                                     response. (default: false)\n   * @param {Boolean} args.owned_by_user If true the only projects owned by this user are returned. (default: false)\n   * @param {Boolean} args.filter_empty_projects If true the only projects with systems are returned (default: false)\n   */\n  async search(args: ISearchArguments): Promise<any> {\n    const route = { path: 'project/projects/search', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['user']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all projects and the user roles for a given user.\n   *\n   * request url: /kapi/v1/project/{providerIdentifier}/all\n   * request method: GET\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   */\n  async searchAll(providerIdentifier): Promise<any> {\n    const route = { path: 'project/{providerIdentifier}/all', method: 'GET', version: 1 }\n    const argList = Object.assign({ providerIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Delete the given project.\n   *\n   * request url: /kapi/v1/project/projects/{project}\n   * request method: DELETE\n   *\n   * @param project\n   * @param {Object} args\n   * @param {Boolean} args.cancel_subscription If true cancel the corresponding subscription. (default: false)\n   */\n  async delete(project, args: IDeleteArguments): Promise<any> {\n    const route = { path: 'project/projects/{project}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ project }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update the given project.\n   *\n   * request url: /kapi/v1/project/projects/{project}\n   * request method: PUT\n   *\n   * @param project\n   * @param {Object} args\n   * @param {String} args.name \n   * @param {String} args.location The location the project should be monitored from (optional)\n   */\n  async update(project, args: IUpdateArguments): Promise<any> {\n    const route = { path: 'project/projects/{project}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['name']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all users for the given project.\n   *\n   * request url: /kapi/v1/project/users/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getUsers(project): Promise<any> {\n    const route = { path: 'project/users/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Remove a given user from the project.\n   *\n   * request url: /kapi/v1/project/users/{project}/{user}\n   * request method: DELETE\n   *\n   * @param project\n   * @param user\n   * @param {Object} args\n   */\n  async removeUser(project, user): Promise<any> {\n    const route = { path: 'project/users/{project}/{user}', method: 'DELETE', version: 1 }\n    const argList = Object.assign({ project, user }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ProjectRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateSystemArguments {\n  project?: number\n  add_standard_alerting?: boolean\n  name: string\n  base_url: string\n  owner: number\n  system_type: number\n  system_size: number\n  add_checklist_checks?: boolean\n  add_support_user?: boolean\n  location?: string\n}\n\nexport interface IUpdateSystemArguments {\n  name?: string\n  base_url?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass SystemRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Create a new system.\n   *\n   * request url: /kapi/v1/project/systems/system\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {Number} args.project The project the system should be part of. If the project is not set a\n   *                               new project will be created with the systems name. (optional)\n   * @param {Boolean} args.add_standard_alerting If true add a standard channel and alerting policy for\n   *                                             the owner. (default: false)\n   * @param {String} args.name The shops name.\n   * @param {Url} args.base_url The shops base url with scheme, subdomain and domain.\n   * @param {Number} args.owner The shops owner (id).\n   * @param {Number} args.system_type The shops system type (id).\n   * @param {Boolean} args.add_checklist_checks If true all checks of the checklist connected to the main\n   *                                            system type are added. (default: true)\n   * @param {Boolean} args.add_support_user Add the support user for support requests (default: true)\n   */\n  async createSystem(args: ICreateSystemArguments): Promise<any> {\n    const route = { path: 'project/systems/system', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['name', 'base_url', 'owner', 'system_type']\n    this._assertValidArguments(requiredArguments, argList)\n\n    const result = await this.connection.send(route, argList)\n    await this.connection.refreshAccessToken(true)\n    return result\n  }\n\n  /**\n   * Update an existing system.\n   *\n   * request url: /kapi/v1/project/systems/system/{system}\n   * request method: PUT\n   *\n   * @param system\n   * @param {Object} args\n   * @param {String} args.name The shops name. (optional)\n   * @param {Url} args.base_url The shops base url with scheme, subdomain and domain. (optional)\n   */\n  async updateSystem(system, args: IUpdateSystemArguments): Promise<any> {\n    const route = { path: 'project/systems/system/{system}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ system }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all components for the given system.\n   *\n   * request url: /kapi/v1/project/systems/{system}/components\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getComponents(system): Promise<any> {\n    const route = { path: 'project/systems/{system}/components', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all suggested component types for the given system.\n   *\n   * request url: /kapi/v1/project/systems/{system}/suggestions\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getComponentSuggestions(system): Promise<any> {\n    const route = { path: 'project/systems/{system}/suggestions', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Set the last full run timestamp on a system.\n   *\n   * request url: /kapi/v1/project/systems/{system}/lastFullRun/{status}\n   * request method: POST\n   *\n   * @param system\n   * @param status\n   * @param {Object} args\n   */\n  async changeLastFullRun(system, status): Promise<any> {\n    const route = { path: 'project/systems/{system}/lastFullRun/{status}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system, status }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the approximated time in seconds when the next full check run is triggered.\n   *\n   * request url: /kapi/v1/project/systems/{system}/nextFullRun\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getNextLastFullRun(system): Promise<any> {\n    const route = { path: 'project/systems/{system}/nextFullRun', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all system types for the given provider.\n   *\n   * request url: /kapi/v1/project/systems/{providerIdentifier}/systemType\n   * request method: GET\n   *\n   * @param providerIdentifier\n   * @param {Object} args\n   * @param system_size The system size id. (optional)\n   */\n  async getSystemTypes(providerIdentifier, system_size): Promise<any> {\n    const route = { path: 'project/systems/{providerIdentifier}/systemType', method: 'POST', version: 1 }\n    const argList = Object.assign({ providerIdentifier, system_size }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the maximum number of components that can be added to the given system.\n   *\n   * request url: /kapi/v1/project/systems/{system}/component/limit\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getComponentLimit(system): Promise<any> {\n    const route = { path: 'project/systems/{system}/component/limit', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Trigger the component finder for a given system.\n   *\n   * request url: /kapi/v1/project/{project}/componentfinder/{system}/{user}/trigger\n   * request method: POST\n   *\n   * @param project\n   * @param system\n   * @param user\n   * @param {Object} args\n   */\n  async triggerComponentFinder(project, system, user): Promise<any> {\n    const route = { path: 'project/{project}/componentfinder/{system}/{user}/trigger', method: 'POST', version: 1 }\n    const argList = Object.assign({ project, system, user }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default SystemRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass ScreenshotRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return the screenshots for a single component.\n   *\n   * request url: /kapi/v1/project/screenshot/{system}\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getScreenshot(system): Promise<any> {\n    const route = { path: 'project/screenshot/{system}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the screenshots for all components in the given project.\n   *\n   * request url: /kapi/v1/project/screenshots/{system}\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getSystemScreenshots(system): Promise<any> {\n    const route = { path: 'project/screenshots/{system}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ScreenshotRepository\n", "import Repository from '../Repository'\n\n\nexport interface IGetChangedConfigurationArguments {\n  newerThan: number\n  minifyOutput?: boolean\n}\n\nexport interface IOverwriteArguments {\n  errors_in_a_row?: number\n  success_in_a_row?: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass ToolRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Get the tool configurations for all tools that changed.\n   *\n   * request url: /kapi/v1/check/tools/changed\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {Number} args.newerThan \n   * @param {Boolean} args.minifyOutput  (default: false)\n   */\n  async getChangedConfiguration(args: IGetChangedConfigurationArguments): Promise<any> {\n    const route = { path: 'check/tools/changed', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['newerThan']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return all tools for the given project.\n   *\n   * request url: /kapi/v1/check/tools/{project}\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async findByProject(project): Promise<any> {\n    const route = { path: 'check/tools/{project}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Get the tool configuration.\n   *\n   * request url: /kapi/v1/check/tools/{project}/{toolIdentifier}\n   * request method: GET\n   *\n   * @param project\n   * @param toolIdentifier\n   * @param {Object} args\n   */\n  async getConfiguration(project, toolIdentifier): Promise<any> {\n    const route = { path: 'check/tools/{project}/{toolIdentifier}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project, toolIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Overwrite tool configuration.\n   *\n   * request url: /kapi/v1/check/tools/{project}/{toolIdentifier}\n   * request method: PUT\n   *\n   * @param project\n   * @param toolIdentifier\n   * @param {Object} args\n   * @param {Number} args.errors_in_a_row Number of errors in a row before marked as failure (optional)\n   * @param {Number} args.success_in_a_row Number of successes in a row before marked as passed (optional)\n   */\n  async overwrite(project, toolIdentifier, args: IOverwriteArguments): Promise<any> {\n    const route = { path: 'check/tools/{project}/{toolIdentifier}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ project, toolIdentifier }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ToolRepository\n", "import Repository from '../Repository'\n\n\nexport interface IAddByChecklistArguments {\n  checklist: any\n  clear_before?: boolean\n  activate_checks?: boolean\n}\n\nexport interface IAddByRecipeArguments {\n  component: number\n  cookbook: number\n}\n\nexport interface IShowCollectionsArguments {\n  group?: string\n}\n\nexport interface IShowActiveCollectionsArguments {\n  group?: string\n}\n\nexport interface IUpdateCollectionsArguments {\n  collections?: any[]\n  group?: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/check/checks/{system}/checklist\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   * @param {*} args.checklist \n   * @param {Boolean} args.clear_before  (default: true)\n   * @param {Boolean} args.activate_checks  (default: false)\n   */\n  async addByChecklist(system, args: IAddByChecklistArguments): Promise<any> {\n    const route = { path: 'check/checks/{system}/checklist', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, args)\n    const requiredArguments = ['checklist']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * request url: /kapi/v1/check/checks/cookbook\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {Number} args.component \n   * @param {Number} args.cookbook \n   */\n  async addByRecipe(args: IAddByRecipeArguments): Promise<any> {\n    const route = { path: 'check/checks/cookbook', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['component', 'cookbook']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Run checks defined by tool identifier for all components within this system.\n   *\n   * request url: /kapi/v1/check/checks/run/{system}/{toolIdentifier}\n   * request method: POST\n   *\n   * @param system\n   * @param toolIdentifier\n   * @param {Object} args\n   */\n  async runChecksForSystem(system, toolIdentifier): Promise<any> {\n    const route = { path: 'check/checks/run/{system}/{toolIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system, toolIdentifier }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of collections for the given project.\n   *\n   * request url: /kapi/v1/check/collections/{project}/{toolIdentifier}\n   * request method: POST\n   *\n   * @param project\n   * @param toolIdentifier\n   * @param {Object} args\n   * @param {String} args.group The collection group. It is used to specify the collections. (default: )\n   */\n  async showCollections(project, toolIdentifier, args: IShowCollectionsArguments): Promise<any> {\n    const route = { path: 'check/collections/{project}/{toolIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ project, toolIdentifier }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of active collections for the given system.\n   *\n   * request url: /kapi/v1/check/collections/system/active/{system}/{toolIdentifier}\n   * request method: POST\n   *\n   * @param system\n   * @param toolIdentifier\n   * @param {Object} args\n   * @param {String} args.group The collection group. It is used to specify the collections. (default: )\n   */\n  async showActiveCollections(system, toolIdentifier, args: IShowActiveCollectionsArguments): Promise<any> {\n    const route = { path: 'check/collections/system/active/{system}/{toolIdentifier}', method: 'POST', version: 1 }\n    const argList = Object.assign({ system, toolIdentifier }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Update the collections. WARNING: will delete the current collection connections and create new.\n   *\n   * request url: /kapi/v1/check/collections/system/{system}\n   * request method: PUT\n   *\n   * @param system\n   * @param {Object} args\n   * @param {Array} args.collections  (optional)\n   * @param {String} args.group The collection group. It is used to specify the collections. (default: )\n   */\n  async updateCollections(system, args: IUpdateCollectionsArguments): Promise<any> {\n    const route = { path: 'check/collections/system/{system}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ system }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckRepository\n", "import Repository from '../Repository'\n\n\nexport interface IGetResultsArguments {\n  targetGroup?: any\n  use_cache?: boolean\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckLighthouseRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return all current lighthouse results for the given systems components.\n   *\n   * request url: /kapi/v1/check/checks/{system}/lighthouse/results/{category}\n   * request method: GET\n   *\n   * @param system\n   * @param category\n   * @param {Object} args\n   * @param {*} args.targetGroup The target group. It can be either an integer or a string. (default: 2000)\n   * @param {Boolean} args.use_cache Use the cache for json document fetch (default: true)\n   */\n  async getResults(system, category, args: IGetResultsArguments): Promise<any> {\n    const route = { path: 'check/checks/{system}/lighthouse/results/{category}', method: 'GET', version: 1 }\n    const argList = Object.assign({ system, category }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckLighthouseRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckA11yRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return all current accessibility audit results for the given systems components.\n   *\n   * request url: /kapi/v1/check/checks/{system}/a11y/results\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/a11y/results', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckA11yRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckBrokenResourceRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/check/checks/{system}/brokenresources\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getBrokenResources(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/brokenresources', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckBrokenResourceRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckJavaScriptErrorsRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/check/checks/{system}/jserrors\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/jserrors', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckJavaScriptErrorsRepository\n", "import Repository from '../Repository'\n\n\nexport interface IIgnorePatternArguments {\n  patterns: any[]\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckFileSizeRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/check/checks/{system}/performance/big\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/performance/big', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Add a new ignore pattern to the configuration.\n   *\n   * request url: /kapi/v1/check/checks/{system}/siteinfo/ignore\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   * @param {Array} args.patterns List of URLs (strings) that will be excluded from the dead link crawl\n   */\n  async ignorePattern(system, args: IIgnorePatternArguments): Promise<any> {\n    const route = { path: 'check/checks/{system}/siteinfo/ignore', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, args)\n    const requiredArguments = ['patterns']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckFileSizeRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckSitemapRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/check/checks/{system}/sitemap\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/sitemap', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckSitemapRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckMobileFriendlyRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Get the mobile friendly result for the given system. Returns a \"skipped\" status if the test never\n   * ran.\n   *\n   * request url: /kapi/v1/check/checks/{system}/mobilefriendly\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/mobilefriendly', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckMobileFriendlyRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckCertificateRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/check/checks/{system}/certificate\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getExpirationResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/certificate', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckCertificateRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckInsecureContentRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return all insecure elements for all components of a system.\n   *\n   * request url: /kapi/v1/check/checks/{system}/insecure\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getInsecureElements(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/insecure', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckInsecureContentRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckCookieRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * This endpoint returns a list of domains that set cookies for the given system. As array elements it\n   * adds the components on that the domain sets the cookies. IMPORTANT: The leankoala worker is blocking\n   * some tracking integrations. So there will never be, for example, a Google Analytics cookie set.\n   *\n   * request url: /kapi/v1/check/checks/{system}/cookies/domains\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getDomains(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/cookies/domains', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckCookieRepository\n", "import Repository from '../Repository'\n\n\nexport interface IIgnorePatternArguments {\n  patterns: any[]\n}\n\nexport interface IUnignorePatternArguments {\n  pattern_id: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckDeadLinksRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Return a list of dead links for every component attached to the given system.\n   *\n   * request url: /kapi/v1/check/checks/{system}/deadlinks\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/deadlinks', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list patterns that should be blocked in the dead link checker.\n   * request url: /kapi/v1/check/checks/deadlinks/blocked\n   * request method: GET\n   *\n   * @param {Object} args\n   */\n  async getBlockedPatterns(): Promise<any> {\n    const route = { path: 'check/checks/deadlinks/blocked', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return a list of dead links for every component in every project owned by the company.\n   *\n   * request url: /kapi/v1/check/checks/company/{company}/deadlinks\n   * request method: GET\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async getResultsByCompany(company): Promise<any> {\n    const route = { path: 'check/checks/company/{company}/deadlinks', method: 'GET', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Return the dead link check configuration for the given system.\n   *\n   * request url: /kapi/v1/check/checks/{system}/deadlinks/config\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getConfiguration(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/deadlinks/config', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Add a new ignore pattern to the configuration.\n   *\n   * request url: /kapi/v1/check/checks/{system}/deadlinks/ignore\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   * @param {Array} args.patterns List of URLs (strings) that will be excluded from the dead link crawl\n   */\n  async ignorePattern(system, args: IIgnorePatternArguments): Promise<any> {\n    const route = { path: 'check/checks/{system}/deadlinks/ignore', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, args)\n    const requiredArguments = ['patterns']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Remove an ignore pattern from the configuration.\n   *\n   * request url: /kapi/v1/check/checks/{system}/deadlinks/unignore\n   * request method: POST\n   *\n   * @param system\n   * @param {Object} args\n   * @param {Number} args.pattern_id Single URL that will not be excluded anymore in the dead link crawl\n   */\n  async unignorePattern(system, args: IUnignorePatternArguments): Promise<any> {\n    const route = { path: 'check/checks/{system}/deadlinks/unignore', method: 'POST', version: 1 }\n    const argList = Object.assign({ system }, args)\n    const requiredArguments = ['pattern_id']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckDeadLinksRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass CheckHealthCheckRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * request url: /kapi/v1/check/checks/{system}/healthchecks\n   * request method: GET\n   *\n   * @param system\n   * @param {Object} args\n   */\n  async getResults(system): Promise<any> {\n    const route = { path: 'check/checks/{system}/healthchecks', method: 'GET', version: 1 }\n    const argList = Object.assign({ system }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CheckHealthCheckRepository\n", "import Repository from '../Repository'\n\n\nexport interface ICreateWebsiteMonitorArguments {\n  url: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass NixstatsRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Create a new 360 website monitor.\n   *\n   * request url: /kapi/v1/check/nixtstats/{company}/monitor/website\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   * @param {String} args.url \n   */\n  async createWebsiteMonitor(company, args: ICreateWebsiteMonitorArguments): Promise<any> {\n    const route = { path: 'check/nixtstats/{company}/monitor/website', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, args)\n    const requiredArguments = ['url']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default NixstatsRepository\n", "import Repository from '../Repository'\n\n\nexport interface ISearchArguments {\n  system?: number\n}\n\nexport interface ISinceArguments {\n  days: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-12\n */\nclass IncidentRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Find all open incidents for the given company.\n   *\n   * request url: /kapi/v1/incident/incidents/company/{company}/search\n   * request method: POST\n   *\n   * @param company\n   * @param {Object} args\n   */\n  async findByCompany(company): Promise<any> {\n    const route = { path: 'incident/incidents/company/{company}/search', method: 'POST', version: 1 }\n    const argList = Object.assign({ company }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Find all open incidents for the given project. Optionally it can be filtered by system.\n   *\n   * request url: /kapi/v1/incident/incidents/{project}/search\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {Number} args.system the system filter (optional)\n   */\n  async search(project, args: Partial<ISearchArguments> = {}): Promise<any> {\n    const route = { path: 'incident/incidents/{project}/search', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Find all incidents that where open in the last days.\n   *\n   * request url: /kapi/v1/incident/incidents/{project}/since\n   * request method: POST\n   *\n   * @param project\n   * @param {Object} args\n   * @param {Number} args.days The number of days the incidents can old\n   */\n  async since(project, args: ISinceArguments): Promise<any> {\n    const route = { path: 'incident/incidents/{project}/since', method: 'POST', version: 1 }\n    const argList = Object.assign({ project }, args)\n    const requiredArguments = ['days']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Find a single incident by id\n   *\n   * request url: /kapi/v1/incident/incidents/{project}/{incident}\n   * request method: GET\n   *\n   * @param project\n   * @param incident\n   * @param {Object} args\n   */\n  async find(project, incident): Promise<any> {\n    const route = { path: 'incident/incidents/{project}/{incident}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project, incident }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * This endpoint returns the the configuration (errors_in_a_row, success_in_a_row) of all tools in the\n   * given project. It also handles tool inheritance.\n   *\n   * request url: /kapi/v1/incident/tools/{project}\n   * request method: GET\n   *\n   * @param project\n   * @param {Object} args\n   */\n  async getConfig(project): Promise<any> {\n    const route = { path: 'incident/tools/{project}', method: 'GET', version: 1 }\n    const argList = Object.assign({ project }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default IncidentRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-08-19\n */\nclass ApplicationRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'MasterConnection'\n    }\n\n  /**\n   * request url: /application/whitelabel/config/cname/{cName}\n   * request method: GET\n   *\n   * @param cName\n   * @param {Object} args\n   */\n  async getConfigByCName(cName): Promise<any> {\n    const route = { path: '/application/whitelabel/config/cname/{cName}', method: 'GET', version: 1 }\n    const argList = Object.assign({ cName }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * request url: /{application}/cluster/primary\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   */\n  async getPrimaryCluster(application): Promise<any> {\n    const route = { path: '/{application}/cluster/primary', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default ApplicationRepository\n", "import Repository from '../Repository'\n\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2023-04-13\n */\nclass LocationRepository extends Repository {\n\n  constructor() {\n    super()\n    this.connectionType = 'ClusterConnection'\n  }\n\n  /**\n   * Return the maximum number of components that can be added to the given system.\n   * request url: /kapi/v1/project/location/list\n   * request method: GET\n   *\n   * @param {Object} args\n   */\n  async list(): Promise<any> {\n    const route = { path: 'project/location/list', method: 'GET', version: 1 }\n    const argList = Object.assign({  }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default LocationRepository\n", "import Repository from '../Repository'\n\n\nexport interface IDisconnectUserArguments {\n  deleteIfNoCompany?: boolean\n}\n\nexport interface ISetClusterArguments {\n  cluster: number\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-05-24\n */\nclass CompanyRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'MasterConnection'\n    }\n\n  /**\n   * Disconnect the user from the company.\n   *\n   * request url: /{application}/company/{company}/disconnect/{user}\n   * request method: PUT\n   *\n   * @param application\n   * @param company\n   * @param user\n   * @param {Object} args\n   * @param {Boolean} args.deleteIfNoCompany  (default: false)\n   */\n  async disconnectUser(application, company, user, args: IDisconnectUserArguments): Promise<any> {\n    const route = { path: '/{application}/company/{company}/disconnect/{user}', method: 'PUT', version: 1 }\n    const argList = Object.assign({ application, company, user }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * request url: /api/{application}/company/{company}\n   * request method: POST\n   *\n   * @param application\n   * @param company\n   * @param {Object} args\n   * @param {Number} args.cluster\n   */\n  async setCluster(application, company, args: ISetClusterArguments): Promise<any> {\n    const route = { path: '/api/{application}/company/{company}', method: 'POST', version: 1 }\n    const argList = Object.assign({ application, company }, args)\n    const requiredArguments = ['cluster']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default CompanyRepository\n", "import Repository from '../Repository'\n\n\nexport interface ILoginWithCredentialsArguments {\n  emailOrUserName: string\n  password: string\n  withMemories?: boolean\n}\n\nexport interface ICreateTokenBySessionArguments {\n  sessionToken?: string\n  withMemories?: boolean\n}\n\nexport interface ICreateTokenByRefreshTokenArguments {\n  with_memories?: boolean\n}\n\nexport interface ICreateTokenArguments {\n  with_memories?: boolean\n}\n\nexport interface ICreateTokenByConfirmCodeAndDeprecatedJwtArguments {\n  deprecatedSessionToken: string\n  confirmationCode: string\n  withMemories?: boolean\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2024-11-08\n */\nclass Auth2Repository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'MasterConnection'\n    }\n\n  /**\n   * request url: /{application}/auth/login\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   * @param {String} args.emailOrUserName \n   * @param {String} args.password \n   * @param {Boolean} args.withMemories If true all Memory entities will be attached in the answer. (default: false)\n   */\n  async loginWithCredentials(application, args: ILoginWithCredentialsArguments): Promise<any> {\n    const route = { path: '/{application}/auth/login', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, args)\n    const requiredArguments = ['emailOrUserName', 'password']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a valid access token by the given refresh token.\n   *\n   * request url: /{application}/auth/session\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   * @param {String} args.sessionToken  (optional)\n   * @param {Boolean} args.withMemories If true all Memory entities will be attached in the answer. (default: false)\n   */\n  async createTokenBySession(application, args: ICreateTokenBySessionArguments): Promise<any> {\n    const route = { path: '/{application}/auth/session', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a valid access token by the given refresh token.\n   *\n   * request url: /{application}/auth/refresh/{user}\n   * request method: POST\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   * @param {Boolean} args.with_memories If true all Memory entities will be attached in the answer. (default: false)\n   */\n  async createTokenByRefreshToken(application, user, args: ICreateTokenByRefreshTokenArguments): Promise<any> {\n    const route = { path: '/{application}/auth/refresh/{user}', method: 'POST', version: 1 }\n    const argList = Object.assign({ application, user }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a valid access token.\n   *\n   * request url: /{application}/auth/token/{user}\n   * request method: POST\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   * @param {Boolean} args.with_memories If true all Memory entities will be attached in the answer. (default: false)\n   */\n  async createToken(application, user, args: ICreateTokenArguments): Promise<any> {\n    const route = { path: '/{application}/auth/token/{user}', method: 'POST', version: 1 }\n    const argList = Object.assign({ application, user }, args)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a valid read-only refresh token by the given refresh token.\n   *\n   * request url: /{application}/auth/read-only-token/{user}\n   * request method: POST\n   *\n   * @param application\n   * @param user\n   * @param {Object} args\n   */\n  async createReadOnlyRefreshToken(application, user): Promise<any> {\n    const route = { path: '/{application}/auth/read-only-token/{user}', method: 'POST', version: 1 }\n    const argList = Object.assign({ application, user }, {})\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Create a valid access token by a confirmation code and the deprecated refresh token.\n   *\n   * request url: /{application}/auth/session-deprecated/confirm\n   * request method: POST\n   *\n   * @param application\n   * @param {Object} args\n   * @param {String} args.deprecatedSessionToken The deprecated session token.\n   * @param {String} args.confirmationCode The confirmation code i.e. from an email.\n   * @param {Boolean} args.withMemories If true all Memory entities will be attached in the answer. (default: false)\n   */\n  async createTokenByConfirmCodeAndDeprecatedJwt(application, args: ICreateTokenByConfirmCodeAndDeprecatedJwtArguments): Promise<any> {\n    const route = { path: '/{application}/auth/session-deprecated/confirm', method: 'POST', version: 1 }\n    const argList = Object.assign({ application }, args)\n    const requiredArguments = ['deprecatedSessionToken', 'confirmationCode']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default Auth2Repository\n", "import Repository from '../Repository'\n\n\nexport interface IIsTwoFactorRequiredArguments {\n  action: string\n}\n\nexport interface ITriggerTwoFactorForActionArguments {\n  action: string\n}\n\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2024-04-03\n */\nclass TwoFactorRepository extends Repository {\n\n    constructor() {\n        super()\n        this.connectionType = 'ClusterConnection'\n    }\n\n  /**\n   * Check if two factor authentication is required for action.\n   *\n   * request url: /kapi/v1/auth/2fa/is-required\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.action \n   */\n  async isTwoFactorRequired(args: IIsTwoFactorRequiredArguments): Promise<any> {\n    const route = { path: 'auth/2fa/is-required', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['action']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n  /**\n   * Trigger two factor authentication for action.\n   *\n   * request url: /kapi/v1/auth/2fa/trigger\n   * request method: POST\n   *\n   * @param {Object} args\n   * @param {String} args.action \n   */\n  async triggerTwoFactorForAction(args: ITriggerTwoFactorForActionArguments): Promise<any> {\n    const route = { path: 'auth/2fa/trigger', method: 'POST', version: 1 }\n    const argList = Object.assign({  }, args)\n    const requiredArguments = ['action']\n    this._assertValidArguments(requiredArguments, argList)\n\n    return this.connection.send(route, argList)\n  }\n\n}\n\nexport default TwoFactorRepository\n", "import SequenceRepository from './Entities/SequenceRepository'\nimport MarketplaceRepository from './Entities/MarketplaceRepository'\nimport SubscriptionRepository from './Entities/SubscriptionRepository'\nimport CrawlerRepository from './Entities/CrawlerRepository'\nimport CustomerHaendlerbundRepository from './Entities/CustomerHaendlerbundRepository'\nimport CustomerHaendlerbundMetricRepository from './Entities/CustomerHaendlerbundMetricRepository'\nimport CustomerMehrwertsteuercheckRepository from './Entities/CustomerMehrwertsteuercheckRepository'\nimport MemoryRepository from './Entities/MemoryRepository'\nimport ScoreRepository from './Entities/ScoreRepository'\nimport AlertingPolicyRepository from './Entities/AlertingPolicyRepository'\nimport AlertingChannelRepository from './Entities/AlertingChannelRepository'\nimport WebsocketRepository from './Entities/WebsocketRepository'\nimport MetricRepository from './Entities/MetricRepository'\nimport AuthRepository from './Entities/AuthRepository'\nimport ClusterUserRepository from './Entities/ClusterUserRepository'\nimport UserRepository from './Entities/UserRepository'\nimport UserSubscriptionRepository from './Entities/UserSubscriptionRepository'\nimport InvitationRepository from './Entities/InvitationRepository'\nimport ClusterCompanyRepository from './Entities/ClusterCompanyRepository'\nimport ComponentRepository from './Entities/ComponentRepository'\nimport ProjectRepository from './Entities/ProjectRepository'\nimport SystemRepository from './Entities/SystemRepository'\nimport ScreenshotRepository from './Entities/ScreenshotRepository'\nimport ToolRepository from './Entities/ToolRepository'\nimport CheckRepository from './Entities/CheckRepository'\nimport CheckLighthouseRepository from './Entities/CheckLighthouseRepository'\nimport CheckA11yRepository from './Entities/CheckA11yRepository'\nimport CheckBrokenResourceRepository from './Entities/CheckBrokenResourceRepository'\nimport CheckJavaScriptErrorsRepository from './Entities/CheckJavaScriptErrorsRepository'\nimport CheckFileSizeRepository from './Entities/CheckFileSizeRepository'\nimport CheckSitemapRepository from './Entities/CheckSitemapRepository'\nimport CheckMobileFriendlyRepository from './Entities/CheckMobileFriendlyRepository'\nimport CheckCertificateRepository from './Entities/CheckCertificateRepository'\nimport CheckInsecureContentRepository from './Entities/CheckInsecureContentRepository'\nimport CheckCookieRepository from './Entities/CheckCookieRepository'\nimport CheckDeadLinksRepository from './Entities/CheckDeadLinksRepository'\nimport CheckHealthCheckRepository from './Entities/CheckHealthCheckRepository'\nimport NixstatsRepository from './Entities/NixstatsRepository'\nimport IncidentRepository from './Entities/IncidentRepository'\nimport Connection from '../Connection/Connection'\nimport ApplicationRepository from './Entities/ApplicationRepository'\nimport LocationRepository from \"./Entities/LocationRepository\";\nimport CompanyRepository from \"./Entities/CompanyRepository\";\nimport Auth2Repository from \"./Entities/Auth2Repository\";\nimport TwoFactorRepository from \"./Entities/TwoFactorRepository\";\n\n/**\n * This class was created by the LeanApiBundle.\n *\n * All changes made in this file will be overwritten by the next create run.\n *\n * @created 2022-06-13\n */\nclass RepositoryCollection {\n\n  private readonly repositories: any\n  private masterConnection: any\n  private clusterConnection: any\n\n  constructor() {\n\n    this.masterConnection = false\n    this.clusterConnection = false\n\n    this.repositories = {}\n    this.repositories.sequence = new SequenceRepository()\n    this.repositories.auth2 = new Auth2Repository()\n    this.repositories.marketplace = new MarketplaceRepository()\n    this.repositories.subscription = new SubscriptionRepository()\n    this.repositories.crawler = new CrawlerRepository()\n    this.repositories.customerhaendlerbund = new CustomerHaendlerbundRepository()\n    this.repositories.customerhaendlerbundmetric = new CustomerHaendlerbundMetricRepository()\n    this.repositories.customermehrwertsteuercheck = new CustomerMehrwertsteuercheckRepository()\n    this.repositories.memory = new MemoryRepository()\n    this.repositories.score = new ScoreRepository()\n    this.repositories.alertingpolicy = new AlertingPolicyRepository()\n    this.repositories.alertingchannel = new AlertingChannelRepository()\n    this.repositories.websocket = new WebsocketRepository()\n    this.repositories.metric = new MetricRepository()\n    this.repositories.auth = new AuthRepository()\n    this.repositories.clusteruser = new ClusterUserRepository()\n    this.repositories.user = new UserRepository()\n    this.repositories.userSubscription = new UserSubscriptionRepository()\n    this.repositories.invitation = new InvitationRepository()\n    this.repositories.clustercompany = new ClusterCompanyRepository()\n    this.repositories.component = new ComponentRepository()\n    this.repositories.project = new ProjectRepository()\n    this.repositories.system = new SystemRepository()\n    this.repositories.screenshot = new ScreenshotRepository()\n    this.repositories.tool = new ToolRepository()\n    this.repositories.check = new CheckRepository()\n    this.repositories.checklighthouse = new CheckLighthouseRepository()\n    this.repositories.checka11y = new CheckA11yRepository()\n    this.repositories.checkbrokenresource = new CheckBrokenResourceRepository()\n    this.repositories.checkjavascripterrors = new CheckJavaScriptErrorsRepository()\n    this.repositories.checkfilesize = new CheckFileSizeRepository()\n    this.repositories.checksitemap = new CheckSitemapRepository()\n    this.repositories.checkmobilefriendly = new CheckMobileFriendlyRepository()\n    this.repositories.checkcertificate = new CheckCertificateRepository()\n    this.repositories.checkinsecurecontent = new CheckInsecureContentRepository()\n    this.repositories.checkcookie = new CheckCookieRepository()\n    this.repositories.checkdeadlinks = new CheckDeadLinksRepository()\n    this.repositories.checkhealthcheck = new CheckHealthCheckRepository()\n    this.repositories.nixstats = new NixstatsRepository()\n    this.repositories.incident = new IncidentRepository()\n    this.repositories.application = new ApplicationRepository()\n    this.repositories.location = new LocationRepository()\n\n    this.repositories.company = new CompanyRepository()\n\n    this.repositories.twofactor = new TwoFactorRepository()\n  }\n\n  setClusterConnection(connection: Connection) {\n    this.clusterConnection = connection\n  }\n\n  setMasterConnection(connection: Connection) {\n    this.masterConnection = connection\n  }\n\n  getRepository(entityType: string) {\n    const repositoryName = entityType.toLowerCase()\n    if (repositoryName in this.repositories) {\n      const repo = this.repositories[repositoryName]\n      if (repo.getConnectionType() === 'ClusterConnection') {\n        repo.setConnection(this.clusterConnection)\n      } else {\n        repo.setConnection(this.masterConnection)\n      }\n      return this.repositories[repositoryName]\n    }\n      throw new Error('No repository with name ' + repositoryName + ' found. Registered repositories are: ' + JSON.stringify(Object.keys(this.repositories)))\n\n  }\n\n  getAuth2Repository(): Auth2Repository {\n    return this.getRepository('Auth2')\n  }\n\n  getSequenceRepository(): SequenceRepository {\n      return this.getRepository('Sequence')\n  }\n\n  getMarketplaceRepository(): MarketplaceRepository {\n      return this.getRepository('Marketplace')\n  }\n\n  getSubscriptionRepository(): SubscriptionRepository {\n      return this.getRepository('Subscription')\n  }\n\n  getCrawlerRepository(): CrawlerRepository {\n      return this.getRepository('Crawler')\n  }\n\n  getCustomerHaendlerbundRepository(): CustomerHaendlerbundRepository {\n      return this.getRepository('CustomerHaendlerbund')\n  }\n\n  getCustomerHaendlerbundMetricRepository(): CustomerHaendlerbundMetricRepository {\n      return this.getRepository('CustomerHaendlerbundMetric')\n  }\n\n  getCustomerMehrwertsteuercheckRepository(): CustomerMehrwertsteuercheckRepository {\n      return this.getRepository('CustomerMehrwertsteuercheck')\n  }\n\n  getMemoryRepository(): MemoryRepository {\n      return this.getRepository('Memory')\n  }\n\n  getScoreRepository(): ScoreRepository {\n      return this.getRepository('Score')\n  }\n\n  getAlertingPolicyRepository(): AlertingPolicyRepository {\n      return this.getRepository('AlertingPolicy')\n  }\n\n  getAlertingChannelRepository(): AlertingChannelRepository {\n      return this.getRepository('AlertingChannel')\n  }\n\n  getWebsocketRepository(): WebsocketRepository {\n      return this.getRepository('Websocket')\n  }\n\n  getMetricRepository(): MetricRepository {\n      return this.getRepository('Metric')\n  }\n\n  getAuthRepository(): AuthRepository {\n      return this.getRepository('Auth')\n  }\n\n  getClusterUserRepository(): ClusterUserRepository {\n      return this.getRepository('ClusterUser')\n  }\n\n  getUserRepository(): UserRepository {\n      return this.getRepository('User')\n  }\n\n  getUserSubscriptionRepository(): UserSubscriptionRepository {\n      return this.getRepository('UserSubscription')\n  }\n\n  getInvitationRepository(): InvitationRepository {\n      return this.getRepository('Invitation')\n  }\n\n  getClusterCompanyRepository(): ClusterCompanyRepository {\n      return this.getRepository('ClusterCompany')\n  }\n\n  getComponentRepository(): ComponentRepository {\n      return this.getRepository('Component')\n  }\n\n  getProjectRepository(): ProjectRepository {\n      return this.getRepository('Project')\n  }\n\n  getSystemRepository(): SystemRepository {\n      return this.getRepository('System')\n  }\n\n  getScreenshotRepository(): ScreenshotRepository {\n      return this.getRepository('Screenshot')\n  }\n\n  getToolRepository(): ToolRepository {\n      return this.getRepository('Tool')\n  }\n\n  getCheckRepository(): CheckRepository {\n      return this.getRepository('Check')\n  }\n\n  getCheckLighthouseRepository(): CheckLighthouseRepository {\n      return this.getRepository('CheckLighthouse')\n  }\n\n  getCheckA11yRepository(): CheckA11yRepository {\n      return this.getRepository('CheckA11y')\n  }\n\n  getCheckBrokenResourceRepository(): CheckBrokenResourceRepository {\n      return this.getRepository('CheckBrokenResource')\n  }\n\n  getCheckJavaScriptErrorsRepository(): CheckJavaScriptErrorsRepository {\n      return this.getRepository('CheckJavaScriptErrors')\n  }\n\n  getCheckFileSizeRepository(): CheckFileSizeRepository {\n      return this.getRepository('CheckFileSize')\n  }\n\n  getCheckSitemapRepository(): CheckSitemapRepository {\n      return this.getRepository('CheckSitemap')\n  }\n\n  getCheckMobileFriendlyRepository(): CheckMobileFriendlyRepository {\n      return this.getRepository('CheckMobileFriendly')\n  }\n\n  getCheckCertificateRepository(): CheckCertificateRepository {\n      return this.getRepository('CheckCertificate')\n  }\n\n  getCheckInsecureContentRepository(): CheckInsecureContentRepository {\n      return this.getRepository('CheckInsecureContent')\n  }\n\n  getCheckCookieRepository(): CheckCookieRepository {\n      return this.getRepository('CheckCookie')\n  }\n\n  getCheckDeadLinksRepository(): CheckDeadLinksRepository {\n      return this.getRepository('CheckDeadLinks')\n  }\n\n  getCheckHealthCheckRepository(): CheckHealthCheckRepository {\n      return this.getRepository('CheckHealthCheck')\n  }\n\n  getNixstatsRepository(): NixstatsRepository {\n      return this.getRepository('Nixstats')\n  }\n\n  getIncidentRepository(): IncidentRepository {\n      return this.getRepository('Incident')\n  }\n\n  getApplicationRepository(): ApplicationRepository {\n    return this.getRepository('Application')\n  }\n\n  getLocationRepository(): LocationRepository {\n    return this.getRepository('Location')\n  }\n\n  getCompanyRepository(): CompanyRepository {\n    return this.getRepository('Company')\n  }\n\n  getTwoFactorRepository(): TwoFactorRepository {\n    return this.getRepository('TwoFactor')\n  }\n}\n\nexport default RepositoryCollection\n", "import axios from 'axios'\nimport {EEnvironment, ESession} from '../Repository/Constants/Enviroment'\nimport {LeankoalaClient} from '../360ApiClient'\nimport {IClientConnectArgs} from '../typescript/interfaces/360ApiClient.interface'\n\ninterface ISessionTokenReturn {\n  sessionToken: string\n  timezone: string\n  nickname: string\n  firstName: string\n  familyName: string\n  isLicensePartner: boolean\n  isTrial: boolean\n  responseObj: any\n}\n\n/**\n * This connector uses the browser session to connect the leankoala client to the auth2 server.\n *\n * @example SessionConnector::connect(client, args)\n *\n * @author Nils Langner (nils.langner@leankoala.com)\n * @created 2022-08-16\n */\nclass SessionConnector {\n  private readonly environment: string\n  private axios: any\n\n  /**\n   * The private constructor. To use the connector please use the static connect function.\n   *\n   * @param {string} environment\n   * @param axios\n   */\n  constructor(environment, axios) {\n    this.environment = environment\n    this.axios = axios\n  }\n\n  /**\n   * Retrieve the session token from the API. This can only be done inside a browser.\n   */\n  public async getSessionToken(): Promise<ISessionTokenReturn> {\n    const sessionTokenResponse = await this.axios.get(this.getSessionEndpoint(), {withCredentials: true})\n    const responseObj = JSON.parse(JSON.stringify(sessionTokenResponse.data))\n    const sessionToken : string = responseObj.access\n\n    if (!sessionToken?.startsWith('ey')) {\n      if (!sessionToken) throw new Error('No session token found')\n      throw new Error(`The returned token is no a valid. Given \"${sessionToken.slice(0, 20)}...\".`)\n    }\n\n    return {\n      sessionToken,\n      timezone: responseObj.timezone,\n      nickname: responseObj.nickname,\n      firstName: responseObj.firstName,\n      familyName: responseObj.familyName,\n      isLicensePartner: responseObj.isLicensePartner,\n      isTrial: responseObj.isTrial,\n      responseObj\n    }\n  }\n\n  public async setTimezone(timezone: string) {\n    try {\n      await this.axios.put(this.getSessionEndpoint('/profile'), {\n        timezone\n      }, {withCredentials: true})\n\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  /**\n   * Connect the given client via the browser session.\n   *\n   * @param client\n   * @param args\n   *\n   * @throws Error\n   */\n  public static async connect(client: LeankoalaClient, args: IClientConnectArgs): Promise<LeankoalaClient> {\n    if (!('axios' in args)) {\n      args.axios = axios\n    }\n\n    if (typeof args.axios !== 'function') {\n      throw new Error(\n        'The axios argument is not a function. Seems like it is not a valid axios object,'\n      )\n    }\n\n    const sessionConnector = new SessionConnector(client.getEnvironment(), args.axios)\n    const {sessionToken} = await sessionConnector.getSessionToken()\n    args.sessionToken = sessionToken\n    await client.connect(args)\n\n    return client\n  }\n\n  /**\n   * Return the correct API endpoint for the given environment.\n   *\n   * @throws Error\n   */\n  private getSessionEndpoint(path = '/token'): string {\n    const domain = window.location.hostname\n    const domainRegex = /(koality(\\.stage)?\\.360monitoring|stage\\.site-quality-monitoring|site-quality-monitoring)\\.com/\n\n    if (domain.includes('koality.io')) {\n      switch (this.environment) {\n        case EEnvironment.Local:\n          throw new Error('The get session should not be used on local development. Please check your white label config for localhost.')\n        case EEnvironment.Stage:\n          return ESession.Stage\n        case EEnvironment.Production:\n          return ESession.Production\n        default:\n          throw new Error('The given environment \"' + this.environment + '\" is unknown.')\n      }\n    } else if (domainRegex.test(domain)) {\n      return `https://${['auth', ...domain.split(domain.includes('koality') ? '.' : '://').slice(domain.includes('koality') ? 1 : 0)].join('.')}${path}`\n    } else {\n      const monitoringDomain = domain.replace('sitecheck', 'monitoring')\n      return `https://${monitoringDomain}${path}`\n    }\n  }\n}\n\nexport default SessionConnector\n", "export default {\n    FEATURE_LANGUAGE_MULTI : 'feature.language_multi',\n    FEATURE_EXTRA_RESULTS : 'plugins.extra.results',\n    FEATURE_PASSWORD : 'feature.password',\n    FEATURE_PAYMENT : 'feature.payment',\n    FEATURE_PAID_SUBSCRIPTION : 'feature.paid_subscription',\n    FEATURE_ALPHA : 'feature.alpha',\n    STATUS_TIME_SERIES_NUMERIC : 'time_series_numeric',\n    STATUS_TIME_SERIES_PERCENT : 'time_series_percent',\n    FEATURE_STATUS_IDEA : '100',\n    FEATURE_STATUS_ALPHA : '200',\n    FEATURE_STATUS_BETA : '300',\n    FEATURE_STATUS_LIVE : '400',\n    FEATURE_CRAWL_DEPTH_2000 : 'plugins.crawl_depth_2000',\n    FEATURE_CRAWL_DEPTH_5000 : 'plugins.crawl_depth_5000',\n    FEATURE_COMPONENT_LIMIT_30 : 'plugins.component_limit30',\n    FEATURE_COMPONENT_LIMIT_50 : 'plugins.component_limit50',\n    FEATURE_COMPONENT_LIMIT_100 : 'plugins.component_limit100',\n    _GENERATED  : true\n}\n"],
  "mappings": "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",
  "names": []
}
